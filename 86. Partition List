/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode firstHead = new ListNode(0);
        ListNode secondHead = new ListNode(0);
        ListNode curLess = firstHead;
        ListNode curLarge = secondHead;
        while(head != null){
            if(head.val < x){
                curLess.next = head;
                curLess = curLess.next;
            }else{
                curLarge.next = head;
                curLarge = curLarge.next;
            }
            head = head.next;
        }
        curLarge.next = null;       //This is very important!!二刷也是错在这里了。。
        curLess.next = secondHead.next;
        return firstHead.next;
    }
}

//https://leetcode.com/discuss/22895/concise-java-code-with-explanation-one-pass
//The basic idea is to maintain two queues, the first one stores all nodes with val less than x , 
//and the second queue stores all the rest nodes. 
//Then concat these two queues. Remember to set the tail of second queue a null next, or u will get TLE.


//二刷代码
public class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode less = new ListNode(0);
        ListNode greater = new ListNode(0);
        ListNode dummy1 = less;
        ListNode dummy2 = greater;
        ListNode cur = head;
        while(cur != null){
            if(cur.val < x){
                less.next = cur;
                less = less.next;
            }else{
                greater.next = cur;
                greater = greater.next;
            }
            cur = cur.next;
        }
        greater.next = null;    //这句没写，和上边代码错误一模一样啊，见鬼
        less.next = dummy2.next;
        return dummy1.next;
    }
}
