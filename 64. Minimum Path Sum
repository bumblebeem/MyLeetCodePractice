//Here are two solutions, the naive one and the optimized one

//For a very clear explanation, refer to the following link
//https://leetcode.com/discuss/38360/10-lines-28ms-o-n-space-dp-solution-in-c-with-explanations

//Naive one
//However, there're still something I should pay attention to:
//line 13 - 14, retrive the length and width of the two-dimension vector
//line 15, how to set the initial values of a two-dimension vector
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, grid[0][0]));
        for(int i = 1; i < m; i ++){
            dp[i][0] = grid[i][0] + dp[i - 1][0];
        }
        for(int j = 1; j < n; j ++){
            dp[0][j] = grid[0][j] + dp[0][j - 1];
        }
        for(int i = 1; i < m; i ++){
            for(int j = 1; j < n; j ++){
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        return dp[m - 1][n - 1];
    }
};


//Optimized one, with less space complexity
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<int> dp(m);
        dp[0] = grid[0][0];
        for(int i = 1; i < m; i ++){
            dp[i] = dp[i - 1] + grid[i][0];
        }
        for(int j = 1; j < n; j ++){
            dp[0] += grid[0][j];
            for(int i = 1; i < m; i ++){
                dp[i] = min(dp[i], dp[i - 1]) + grid[i][j];
            }
        }
        return dp[m - 1];
    }
};


//二刷 in Java
//Naive solution
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return -1;
        }
        int row = grid.length;
        int col = grid[0].length;
        int[][] dp = new int[row][col];
        dp[0][0] = grid[0][0];
        for(int i = 1; i < grid.length; i ++){
            dp[i][0] = grid[i][0] + dp[i - 1][0];
        }
        for(int i = 1; i < grid[0].length; i ++){
            dp[0][i] = grid[0][i] + dp[0][i - 1];
        }
        for(int i = 1; i < grid.length; i ++){
            for(int j = 1; j < grid[0].length; j ++){
                dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
            }
        }
        return dp[row - 1][col - 1];
    }
}


//Optimized solution,没有直接AC，还搞了半天啊，我晕
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return -1;
        }
        int row = grid.length;
        int col = grid[0].length;
        int[] dp = new int[col];
        dp[0] = grid[0][0];
        for(int i = 1; i < col; i ++){
            dp[i] = dp[i - 1] + grid[0][i];
        }
        for(int i = 1; i < row; i ++){
            dp[0] += grid[i][0];
            for(int j = 1; j < col; j ++){
                dp[j] = Math.min(dp[j], dp[j - 1]) + grid[i][j];
            }
        }
        return dp[col - 1];
    }
}
