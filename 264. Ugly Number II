//https://leetcode.com/discuss/58186/elegant-c-solution-o-n-space-time-with-detailed-explanation
//The idea is not very hard to come up with, however, there are details need to be taken care of
//when try to implement it.
public class Solution {
    public int nthUglyNumber(int n) {
        if(n <= 0){
            return 0;
        }
        if(n == 1){
            return 1;
        }
        int two_index = 0;
        int three_index = 0;
        int five_index = 0;
        int []k = new int[n];
        k[0] = 1;
        for(int i = 1; i < n; i ++){
            k[i] = Math.min(Math.min(k[two_index] * 2, k[three_index] * 3), k[five_index] * 5);
            if(k[i] == k[two_index] * 2){
                two_index ++;
            }
            if(k[i] == k[three_index] * 3){
                three_index ++;
            }
            if(k[i] == k[five_index] * 5){
                five_index ++;
            }
        }
        return k[n - 1];
    }
}


//Here is a Java version
public class Solution {
    public int nthUglyNumber(int n) {
        ArrayList<Integer> q = new ArrayList<Integer>();
        q.add(1);
        int i = 0, j = 0, k = 0;
        while(q.size() < n){
            q.add(Math.min(Math.min(q.get(i) * 2, q.get(j) * 3), q.get(k) * 5));
            if(q.get(q.size() - 1) == q.get(i) * 2){
                i ++;
            }
            if(q.get(q.size() - 1) == q.get(j) * 3){
                j ++;
            }
            if(q.get(q.size() - 1) == q.get(k) * 5){
                k ++;
            }
        }
        return q.get(q.size() - 1);
    }
}
