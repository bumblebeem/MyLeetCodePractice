public class Solution {
    public int[] singleNumber(int[] nums) {
        int[] result = new int[2];
        int diff = 0;
        for(int i = 0; i < nums.length; i ++){
            diff ^= nums[i];
        }
        diff = Integer.lowestOneBit(diff);
        for(int i = 0; i < nums.length; i ++){
            if((diff & nums[i]) == 0){
                result[0] ^= nums[i];
            }
            else{
                result[1] ^= nums[i];
            }
        }
        return result;
    }
}

//line 8, could also use bit manipulation to get the difference, however it's tricky for me... Notice this bit could be any bit who is non-zero in the XOR result
//line 3, review the declaration of Java array...
//line 10, == has higher priority than &. You might want to wrap your operations in () to specify your own priority. 

/*Idea:
If you were stuck by this problem, it's easy to find a solution in the discussion. However, usually, the solution lacks some explanations.

I'm sharing my understanding here:

The two numbers that appear only once must differ at some bit, this is how we can distinguish between them. Otherwise, they will be one of the duplicate numbers.

Letâ€™s say the at the ith bit, the two desired numbers differ from each other. which means one number has bit i equaling: 0, the other number has bit i equaling 1.

Thus, all the numbers can be partitioned into two groups according to their bits at location i. the first group consists of all numbers whose bits at i is 0. the second group consists of all numbers whose bits at i is 1.

Notice that, if a duplicate number has bit i as 0, then, two copies of it will belong to the first group. Similarly, if a duplicate number has bit i as 1, then, two copies of it will belong to the second group.

by XoRing all numbers in the first group, we can get the first number. by XoRing all numbers in the second group, we can get the second number.
*/
