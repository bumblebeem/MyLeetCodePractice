public class NumMatrix {
    private int[][] dp;

    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return;
        }
        int row = matrix.length;
        int col = matrix[0].length;
        dp = new int[row + 1][col + 1];  
        
        for(int i = 1; i <= row; i ++) {
            for(int j = 1; j <= col; j ++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }
    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        int i_min = Math.min(row1, row2);
        int i_max = Math.max(row1, row2);
        
        int j_min = Math.min(col1, col2);
        int j_max = Math.max(col1, col2);
        
        return dp[i_max + 1][j_max + 1] - dp[i_max + 1][j_min] - dp[i_min][j_max + 1] + dp[i_min][j_min];
    }
}


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix = new NumMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);


//*use "+ 1" is important to avoid boundary cases (for loops on line 12, 13)
//dp[i][j] represents the sum of area from matrix[0][0] to matrix[i - 1][j - 1]
//https://leetcode.com/discuss/69424/clean-c-solution-and-explaination-o-mn-space-with-o-1-time
