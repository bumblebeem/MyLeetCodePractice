public class Solution {
    public void gameOfLife(int[][] board) {
        if(board == null || board.length == 0){
            return;
        }
        int m = board.length;
        int n = board[0].length;
        
        for(int i = 0; i < m; i ++){
            for(int j = 0; j < n; j ++){
                int neighbors = liveNeighbors(board, m, n, i, j);
                
                //Only adjust the value if the next state is alive(1)
                if(board[i][j] == 1 && (neighbors == 2 || neighbors == 3)){
                    board[i][j] = 3;
                }
                if(board[i][j] == 0 && neighbors == 3){
                    board[i][j] = 2;
                }
            }
        }
        
        //Because we use ">>"" and our default value is 1 or 0, the defalut state of next is dead(0)
        for(int i = 0; i < m; i ++){
            for(int j = 0; j < n; j ++){
                board[i][j] >>= 1;
            }
        }
    }
    
    private int liveNeighbors(int[][] board, int m, int n, int i, int j){
        int neighbors = 0;
        //Use the Math.max & Math.min to deal with the index out of bound issue
        for(int x = Math.max(0, i - 1); x <= Math.min(m - 1, i + 1); x ++){
            for(int y = Math.max(0, j - 1); y <=Math.min(n - 1, j + 1); y ++){
                neighbors += (board[x][y] & 1);
            }
        }
        //don't forget to subtract the cell itself...
        neighbors -= (board[i][j] & 1);
        return neighbors;
    }
}


//Here is a great explanation of this problem:
//https://leetcode.com/discuss/68352/easiest-java-solution-with-explanation
