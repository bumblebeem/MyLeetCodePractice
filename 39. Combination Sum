public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        getCombination(0, res, new ArrayList<Integer>(), candidates, target);
        return res;
    }
    
    public void getCombination(int start, List<List<Integer>> res, List<Integer> cur, int[] candidates, int target) {
        if(target == 0) {
            res.add(cur);
        } else if (target > 0) {
            for(int i = start; i < candidates.length && candidates[i] <= target; i ++) {
                cur.add(candidates[i]);
                getCombination(i, res, new ArrayList<Integer>(cur), candidates, target - candidates[i]);
                cur.remove(cur.size() - 1);
            }
        }
    }
}


// line 11 , 15中的cur和new ArrayList<Integer>(cur)可以互换。。。
// line 11可以写成：res.add(new ArrayList<Integer>(cur));
// line 15同时改写成：getCombination(i, res, cur, candidates, target - candidates[i]);
// 总之，这两个地方至少有一个地方需要new一个ArrayList，否则就会出错。。。
// 二刷：就是一个deep copy的问题


// 再刷一次AC了
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(candidates == null || candidates.length == 0){
            return res;
        }
        getCombinationSum(res, new ArrayList<Integer>(), target, candidates, 0);
        return res;
    }
    
    private void getCombinationSum(List<List<Integer>> res, List<Integer> cur, int target, int[] candidates, int start){
        if(target == 0){
            res.add(new ArrayList<Integer>(cur));
            return;
        }
        for(int i = start; i < candidates.length; i ++){
            if(target - candidates[i] >= 0){
                cur.add(candidates[i]);
                getCombinationSum(res, cur, target - candidates[i], candidates, i);
                cur.remove(cur.size() - 1);
            }
        }
    }
}
