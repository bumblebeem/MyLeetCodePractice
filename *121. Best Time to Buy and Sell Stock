//This question could be transformed into question 53
//https://en.wikipedia.org/wiki/Maximum_subarray_problem
//https://leetcode.com/discuss/48378/kadanes-algorithm-since-mentioned-about-interviewer-twists

int maxProfit(int* prices, int pricesSize) {
    int max = 0, curMax = 0;
    for(int i = 1; i < pricesSize; i ++){
        curMax += prices[i] - prices[i - 1];
        if(curMax > max){
            max = curMax;
        }
        if(curMax < 0){
            curMax = 0;
        }
    }
    return max;
}


public class Solution {
    public int maxProfit(int[] prices) {
        int cur_max = 0, max = 0;
        for(int i = 1; i < prices.length; i ++){
            cur_max += prices[i] - prices[i - 1];
            cur_max = Math.max(0, cur_max);
            max = Math.max(cur_max, max);
        }
        return max;
    }
}

