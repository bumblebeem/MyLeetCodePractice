// Naive Solution
public class Vector2D implements Iterator<Integer> {
    private List<Integer> nums;
    private int pointer;

    public Vector2D(List<List<Integer>> vec2d) {
        nums = new ArrayList<Integer>();
        for(int i = 0; i < vec2d.size(); i ++){
            for(int j = 0; j < vec2d.get(i).size(); j ++){
                nums.add(vec2d.get(i).get(j));
            }
        }
        pointer = 0;
    }

    @Override
    public Integer next() {
        Integer res = nums.get(pointer ++);
        return res;
    }

    @Override
    public boolean hasNext() {
        return pointer < nums.size();
    }
}

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D i = new Vector2D(vec2d);
 * while (i.hasNext()) v[f()] = i.next();
 */
 
 
// follow-up: As an added challenge, try to code it using only iterators in Java.
public class Vector2D implements Iterator<Integer> {
    private Iterator<List<Integer>> i;
    private Iterator<Integer> j;

    public Vector2D(List<List<Integer>> vec2d) {
        i = vec2d.iterator();
    }

    @Override
    public Integer next() {
        return j.next();
    }

    @Override
    public boolean hasNext() {
        while((j == null || !j.hasNext()) && i.hasNext()){
            j = i.next().iterator();
        }
        return j != null && j.hasNext();
    }
}

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D i = new Vector2D(vec2d);
 * while (i.hasNext()) v[f()] = i.next();
 */
 
 // 注意一些语法；另外自己写的时候，54行没有写出 j != null 这个条件。。
