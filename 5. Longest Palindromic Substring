public class Solution {
    public String longestPalindrome(String s) {
        if(s.length() < 2){
            return s;
        }
        
        int start = 0, max_len = 1;
        for(int i = 0; i < s.length();) {
            //i is the middle point of the palindrome, so if the following statement is
            //true, we could break because there can't be a palindrome longer than current longest 
            //palindrome
            if(s.length() - i <= max_len / 2) {
                break;
            }
            int right = i, left = i;
            while(right + 1 < s.length() && s.charAt(right) == s.charAt(right + 1)) {  //skip duplicate characters
                right ++;
            }
            //set i to be "right + 1" instead of using "i ++" in the outer for loop(line 8)
            i = right + 1;
            while(right + 1 < s.length() && left - 1 >= 0 && s.charAt(left - 1) == s.charAt(right + 1)) {  //find new palindrome
                left --;
                right ++;
            }
            int cur_len = right - left + 1;
            if(cur_len > max_len) {
                max_len = cur_len;
                start = left;
            }
        }
        
        return s.substring(start, start + max_len);
    }
}


//Here is a more easy-to-come-up-with solution
public class Solution {
    private int start = 0;
    private int maxLen = 1;
    
    public String longestPalindrome(String s) {
        if(s.length() < 2) {
            return s;
        }
        
        for(int i = 0; i < s.length() - 1; i ++) {
            expandPalindrome(s, i, i);  //assume odd length
            expandPalindrome(s, i, i + 1);  //assume even length
        }
        
        return s.substring(start, start + maxLen);
    }
    
    private void expandPalindrome(String s, int left, int right) {
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left --;
            right ++;
        }
        
        //left already "++"" and right already "--", so here
        //the max length should be "right - left - 1"
        //max palindrome actually starts at left+1 and ends at right-1
        if(right - left - 1 > maxLen) {
            maxLen = right - left - 1;
            start = left + 1;
        }
    }
}
