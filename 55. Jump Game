//Following two solution were created totally by myself, yeah!
//Notice the difference between line 6 and line 18, different end conditions
//for these two while loop.
public class Solution {
    public boolean canJump(int[] nums) {
        int last = nums.length - 1;
        for(int i = nums.length - 1; i >= 0; i --){
            if(nums[i] + i >= last){
                last = i;
            }
        }
        return last == 0;
    }
}

public class Solution {
    public boolean canJump(int[] nums) {
        int reach = 0;
        for(int i = 0; i < nums.length && i <= reach; i ++){    //注意i <= reach的这个剪枝
            if(i + nums[i] >= reach){
                reach = i + nums[i];
            }
        }
        return reach >= nums.length - 1;
    }
}

//Idea is to work backwards from the last index. 
//Keep track of the smallest index that can "jump" to the last index. 
//Check whether the current index can jump to this smallest index.

/*
    Here is another way of doing it..
*/
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int size = nums.size();
        int farest = 0;
        for(int i = 0; i < size; i ++){
            if(i > farest){   //注意这里可以剪枝
                return false;
            }
            farest = max(nums[i] + i, farest);
        }
        return true;
    }
};


//DP solution,比Greedy的时间复杂度高，TLE！！！
public class Solution {
    public boolean canJump(int[] A) {
        boolean[] dp = new boolean[A.length];
        Arrays.fill(dp, false);
        dp[0] = true;
        for(int i = 1; i < A.length; i ++){
            for(int j = 0; j < i; j ++){
                if(j + A[j] >= i && dp[j] == true){
                    dp[i] = true;
                }
            }
        }
        
        return dp[A.length - 1];
    }
}
