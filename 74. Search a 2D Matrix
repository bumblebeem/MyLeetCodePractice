public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length;
        int col = matrix[0].length;

        int low = 0, high = row * col - 1;

        while(low <= high){
        	int mid = low + (high - low) / 2;
        	if(matrix[mid / col][mid % col] == target){
        		return true;
        	}
        	else if(matrix[mid / col][mid % col] < target){
        		low = mid + 1;
        	}
        	else{
        		high = mid - 1;
        	}
        }
        return false;
    }
}


//Treat it as a sorted array, so we could use binary search!
//***The key is line 10, how to use mid to get the index of the element, i.e. mid/col and mid%col
//Also pay attention to line 3 & 4, about how to get col and row of a 2-D matrix


//Another solution, easy-to-understand, the key is to start search from upper-right position!
//这个方法可以和240. Search a 2D Matrix II共用！
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix[0].length == 0){
            return false;
        }
        int i = 0, j = matrix[0].length - 1;
        while(i < matrix.length && j >= 0){
            if(target > matrix[i][j]){
                i ++;
            } else if(target < matrix[i][j]){
                j --;
            } else {
                return true;
            }
        }
        return false;
    }
}
