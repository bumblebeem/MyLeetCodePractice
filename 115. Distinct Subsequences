public class Solution {
    public int numDistinct(String S, String T) {
        if(S == null || T == null || S.length() == 0 || S.length() < T.length()){
            return 0;
        }
        int s = S.length();
        int t = T.length();
        int[][] dp = new int[s + 1][t + 1];
        for(int i = 0; i <= s; i ++){
            dp[i][0] = 1;
        }
        for(int j = 1; j <= t; j ++){
            for(int i = 1; i <= s; i ++){
                if(S.charAt(i - 1) == T.charAt(j - 1)){
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[s][t];
    }
}


//难点：1.想到用DP的方法求解 2.搞清楚DP数组的含义
//dp[i][j]的含义是，利用“字符串S中的前i个字符”可以组成多少“字符串T中的前j个字符”

//https://leetcode.com/discuss/19735/a-dp-solution-with-clarification-and-explanation
