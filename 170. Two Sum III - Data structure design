/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */

// 法一：O(1) add, O(n) find
public class TwoSum {
    Map<Integer, Integer> map;

    /** Initialize your data structure here. */
    public TwoSum() {
        map = new HashMap<Integer, Integer>();
    }
    
    /** Add the number to an internal data structure.. */
    public void add(int number) {
        if(map.containsKey(number)){
            map.put(number, 2);
        } else {
            map.put(number, 1);
        }
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
        Iterator<Integer> it = map.keySet().iterator();
        while(it.hasNext()){
            int num1 = it.next();
            int num2 = value - num1;
            if(num1 == num2){
                if(map.get(num2) == 2){
                    return true;
                }
            } else {
                if(map.containsKey(num2)){
                    return true;
                }
            }
        }
        return false;
    }
}

// 1. 注意28行语法
// 2. add函数的理解：因为就是求两个数的和，所以HashMap只需要记录出现的次数为1还是2，出现更多次的话，并没有用了


// 法二：O(n) add, O(1) find
public class TwoSum {
        Set<Integer> sum;
        Set<Integer> num;
        
        TwoSum(){
            sum = new HashSet<Integer>();
            num = new HashSet<Integer>();
        }
        
        // Add the number to an internal data structure.
    	public void add(int number) {
    	    if(num.contains(number)){
    	        sum.add(number * 2);
    	    }else{
    	        Iterator<Integer> iter = num.iterator();
    	        while(iter.hasNext()){
    	            sum.add(iter.next() + number);
    	        }
    	        num.add(number);
    	    }
    	}
    
        // Find if there exists any pair of numbers which sum is equal to the value.
    	public boolean find(int value) {
    	    return sum.contains(value);
    	}
}


// https://discuss.leetcode.com/topic/32449/trade-off-in-this-problem-should-be-considered/2
