/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        return helper(root, 0);
    }
    
    int helper(TreeNode* root, int sum){
        if(root == NULL){
            return 0;
        }
        if(root -> left == NULL && root -> right == NULL){  //if the node is a leaf
            return sum * 10 + root -> val;
        }
        return helper(root -> left, sum * 10 + root -> val) 
               + helper(root -> right, sum * 10 + root -> val);
    }
};

//I think I still need a better understanding of recursive functions...


//下边这个解法是直接复制粘贴过来的，二刷的时候用Java写了同样的代码
//后来才想起来Java基本类型是传值不能传引用，所以sum总是0.。。尴尬
class Solution {
private:
	void traverseAndSum(TreeNode *root, int &sum, int parSum);
public:
	int sumNumbers(TreeNode *root) {		
		int sum = 0;
		traverseAndSum(root, sum, 0);
		return sum;
	}
};

void Solution::traverseAndSum(TreeNode *root, int &sum, int parSum)
{
	if (root == NULL)
		return;

	parSum = parSum * 10 + root->val;
	if (root->left == NULL && root->right == NULL)
	{
		// Encountered a leaf node. Evaluate the sum
		sum += parSum;
		return;
	}
	traverseAndSum(root->left, sum, parSum);
	traverseAndSum(root->right, sum, parSum);
}
