/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 /*
  Try the recursive way first, just use the inorder tranverse of BST,
  in order to find out the kth smallest element
 */
class Solution {
    public int count = 0;        //因为后边函数用的是传值而不是传引用，
    public int result = 0;       //所以需要这两个全局变量

    public int kthSmallest(TreeNode root, int k) {
        inorderTranverse(root, k);
        return result;
    }
    
    public void inorderTranverse(TreeNode root, int k){
        if(root == NULL){
            return;
        }
        inorderTranverse(root.left, k);
        count ++;
        if(k == count){
            result = root.val;
            return;
        }
        inorderTranverse(root.right, k);
    }
    
    // private void inorderTranverse(TreeNode root, int k){
    //     if(root.left != null){
    //         inorderTranverse(root.left, k);
    //     }
    //     count ++;
    //     if(k == count){
    //         result = root.val;
    //         return;
    //     }
    //     if(root.right != null){
    //         inorderTranverse(root.right, k);
    //     }
    // }
};


/*
  This the second method, do the first method in a iterative way
  line 67 的条件需要注意还有cur != NULL!!
  注意count++的位置，在else里边，不在if里边
  Similar to Problem #94!!
*/
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int count = 0;
        TreeNode* cur = root;
        stack<TreeNode*> inorder_stack;
        inorder_stack.push(cur);
        
        while(! inorder_stack.empty() || cur != NULL){
            if(cur){
                inorder_stack.push(cur);
                cur = cur -> left;
            }
            else{
                TreeNode* top = inorder_stack.top();
                if(++ count == k){
                    return top -> val;
                }
                cur = top -> right;
                inorder_stack.pop();
            }
        }
    }
};

//Java version
public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        TreeNode cur = root;
        int count = 0;
        
        while(!stack.isEmpty() || cur != null){
            if(cur != null){
                stack.push(cur);
                cur = cur.left;
            } else {
                TreeNode top = stack.pop();
                if(++count == k){
                    return top.val;
                } 
                cur = top.right;
            }
        }
        return -1;
    }
}


/*
  Method Three, 本质上应该还是DFS，然而不需要额外的空间（即不需要stack）
  We count the number of nodes of left sub tree and right sub tree recursively. 
  Suppose the Kth smallest element is in the right sub tree, then we need to update k as k - leftCount - 1 
  (leftCount + 1 is the number of nodes of left sub tree plus the root node). 
  Only when k equals leftCount + 1, we find the target.
*/
public class Solution {
    public int ans = 0;
    
    public int kthSmallest(TreeNode root, int k) {
        helper(root, k);
        return ans;
    }
    
    public int helper(TreeNode root, int k){
        if(root == null){
            return 0;
        }
        int leftCount = helper(root.left, k);
        int rightCount = helper(root.right, k - leftCount - 1);
        if(k == leftCount + 1){
            ans = root.val;
        }
        return leftCount + rightCount + 1;
    }
}


//Here is a excellent link! MUST SEE（其实就是囊括了前边的三种解法）!主要是第一种解法需要特别理解（和method three一样。。）！！
//https://discuss.leetcode.com/topic/17810/3-ways-implemented-in-java-binary-search-in-order-iterative-recursive


//Follow-up的解法
//https://discuss.leetcode.com/topic/17668/what-if-you-could-modify-the-bst-node-s-structure
