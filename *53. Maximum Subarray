public class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0){
            return Integer.MIN_VALUE;
        }
        int maxEndHere = nums[0];
        int maxSoFar = nums[0];
        for(int i = 1; i < nums.length; i ++){
            maxEndHere = Math.max(nums[i], maxEndHere + nums[i]);
            maxSoFar = Math.max(maxSoFar, maxEndHere);
        }
        return maxSoFar;
    }
}

// https://en.wikipedia.org/wiki/Maximum_subarray_problem

/*
  https://discuss.leetcode.com/topic/5000/accepted-o-n-solution-in-java
  This problem was discussed by Jon Bentley (Sep. 1984 Vol. 27 No. 9 Communications of the ACM P885),
  the paragraph below was copied from his paper (with a little modifications):
  
  Algorithm that operates on arrays: it starts at the left end (element A[1]) and scans through to the right end (element A[n]), 
  keeping track of the maximum sum subvector seen so far. 
  The maximum is initially A[0]. Suppose we've solved the problem for A[1 .. i - 1];
  how can we extend that to A[1 .. i]? 
  The maximum sum in the first i elements is either the maximum sum in the first i - 1 elements (which we'll call MaxSoFar), 
  or it is that of a subvector that ends in position i (which we'll call MaxEndingHere).
  MaxEndingHere is either A[i] plus the previous MaxEndingHere, or just A[i], whichever is larger.
*/


/*
  Here is another more easy-understanding code!
  Of course, the code below could be further simplified into the code above.
*/
public class Solution {
    public int maxSubArray(int[] nums) {
        int[] dp = new int[nums.length];    //dp[i] means the maximum subarray ending with A[i];
        dp[0] = nums[0];
        int max = nums[0];
        for(int i = 1; i < nums.length; i ++){
            dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}


// Solve it using "Prefix Sum", 相当于在数组最前边加一个值为0的dummy元素，之后通过前缀数组的和来求解
public class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        
        int max = Integer.MIN_VALUE;
        int prefixSum = 0, minSofar = 0;
        for(int i = 0; i < nums.length; i ++){
            prefixSum += nums[i];
            max = Math.max(max, prefixSum - minSofar);
            minSofar = Math.min(minSofar, prefixSum);
        }
        
        return max;
    }
}

