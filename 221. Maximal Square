//https://leetcode.com/discuss/38489/easy-solution-with-detailed-explanations-8ms-time-and-space

//Solution 1, 这道题因为二维数组col和row搞错，耽误了好久啊，不应该！！！
public class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        
        int max = 0;
        int col = matrix[0].length;
        int row = matrix.length;
        
        int[][] opt = new int[row][col];
        
        for (int j = 0; j < col; j++) {
            opt[0][j] = matrix[0][j] - '0';
            max = Math.max(max, opt[0][j]);
        }
        for (int i = 0; i < row; i++) {
            opt[i][0] = matrix[i][0] - '0';
            max = Math.max(max, opt[i][0]);
        }
        for(int i = 1; i < row; i ++){
            for(int j = 1; j < col; j ++){
                if(matrix[i][j] == '1'){
                    opt[i][j] = Math.min(opt[i - 1][j - 1], Math.min(opt[i - 1][j], opt[i][j - 1])) + 1;
                    max = Math.max(opt[i][j], max);
                }
            }
        }
        
        return max * max;
    }
}



//Solution 2(optimized)
//See the link on the top of this page, understood the first optimazation, didn't quite understand the third one.
