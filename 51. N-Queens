class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> nQueens(n, string(n, '.'));
        solveNQueens(res, nQueens, 0, n);
        return res;
    }

private:
    void solveNQueens(vector<vector<string>> &res, vector<string> &nQueens, int row, int &n){
        if(row == n){
            res.push_back(nQueens);
            return;
        }
        for(int col = 0; col < n; col ++){
            if(isValid(nQueens, row, col, n)){
                nQueens[row][col] = 'Q';
                solveNQueens(res, nQueens, row + 1, n);
                nQueens[row][col] = '.';
            }
        }
    }
    
    bool isValid(vector<string> &nQueens, int row, int col, int &n){
        for(int i = 0; i < row; i ++){
            if(nQueens[i][col] == 'Q'){
                return false;
            }
        }
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i --, j --){
            if(nQueens[i][j] == 'Q'){
                return false;
            }
        }
        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i --, j ++){
            if(nQueens[i][j] == 'Q'){
                return false;
            }
        }
        return true;
    }
};


// https://discuss.leetcode.com/topic/13617/accepted-4ms-c-solution-use-backtracking-and-bitmask-easy-understand
// Mimic the above solution in the discussion... And this solution could be further optimized according 
// to the link above. 
// Understand the function isValid, need a better understanding of the rest part of line 18 - 20.(Understood now!!)

// *Except line 19 &res, other parameters in the signature of the solveNQueens and isValid function could
// use themselves rather than their references(e.g. use n instead of &n), however, use refereces to these 
// parameters dramatically increase the efficiency of the program!


// 强行用Java写了，比较clumsy啊。。
// Basic idea is just ordinary DFS, nothing fancy, easy for me now
public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i ++){
            for(int j = 0; j < n; j ++){
                board[i][j] = '.';
            }
        }
        getNQueensSolution(res, board, n, 0);
        return res;
    }
    
    private void getNQueensSolution(List<List<String>> res, char[][] board, int n, int row){
        if(row == n){
            res.add(helper(board));
            return;
        }
        for(int col = 0; col < n; col ++){
            if(isValid(board, row, col, n)){
                board[row][col] = 'Q';
                getNQueensSolution(res, board, n, row + 1);
                board[row][col] = '.';
            }
        }
    }
    
    private boolean isValid(char[][] board, int row, int col, int n){
        for(int i = 0; i < row; i ++){
            if(board[i][col] == 'Q'){
                return false;
            }
        }
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i --, j --){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i --, j ++){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        return true; 
    }
    
    private List<String> helper(char[][] board) {
        List<String> cur = new ArrayList<String>();
        for(int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            cur.add(s);
        }
        return cur;
    }
}
