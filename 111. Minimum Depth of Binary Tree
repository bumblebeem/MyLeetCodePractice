/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 /*
  Recursive
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(! root){
            return 0;
        }
        if(root -> left == NULL){
            return minDepth(root -> right) + 1;
        }
        if(root -> right == NULL){
            return minDepth(root -> left) + 1;
        }
        return min(minDepth(root -> left), minDepth(root -> right)) + 1;
    }
};

/*
  Iterative
  Use only one queue to do the BFS, use a NULL pointer(or whatever) to distinguish the last element of a certain level
*/
class Solution {
public:
    int minDepth(TreeNode* root) {
        int min_depth = 1;
        if(root == NULL){
            return 0;
        }
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        while(! q.empty()){
            TreeNode* cur = q.front();
            q.pop();
            if(cur == NULL){
                q.push(NULL);
                min_depth ++;
            }
            else{
                if(cur -> left == NULL && cur -> right == NULL){
                    return min_depth;
                }
                if(cur -> left){
                    q.push(cur -> left);
                }
                if(cur -> right){
                    q.push(cur -> right);
                }
            }
        }
        return min_depth;
    }
};


//Use Java to solve it!
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int minDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        int min_depth = 1;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        queue.add(null);
        while(! queue.isEmpty()){
            TreeNode cur = queue.poll();
            if(cur == null){
                min_depth ++;
                queue.add(null);
            }
            else{
                if(cur.left == null && cur.right == null){
                    return min_depth;
                }
                if(cur.left != null){
                    queue.add(cur.left);
                }
                if(cur.right != null){
                    queue.add(cur.right);
                }
            }
        }
        return min_depth;
    }
}


//My newest Java iterative solution
public class Solution {
    public int minDepth(TreeNode root) {
        int depth = 0;
        if(root == null){
            return depth;
        }
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            depth ++;
            for(int i = 0; i < size; i ++){
                TreeNode cur = q.poll();
                if(cur.left == null && cur.right == null){
                    return depth;
                } else if(cur.left == null){
                    q.add(cur.right);
                } else if(cur.right == null){
                    q.add(cur.left);
                } else {
                    q.add(cur.left);
                    q.add(cur.right);
                }
            }
        }
        return depth;
    }
}
