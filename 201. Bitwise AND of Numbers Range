public class Solution {
    public int rangeBitwiseAnd(int m, int n) {
        int count = 0;
        while(m != n) {
            m >>= 1;
            n >>= 1;
            count ++;
        }
        return m << count;
    }
}

public class Solution {
    public int rangeBitwiseAnd(int m, int n) {
        if(m == 0){
            return 0;
        }
        int moveFactor = 1;
        while(m != n){
            m >>= 1;
            n >>= 1;
            moveFactor <<= 1;
        }
        return m * moveFactor;
    }
}


//It's a problem that can be reduced to find the same prefix of the numbers in this range.
//https://discuss.leetcode.com/topic/12133/bit-operation-solution-java
