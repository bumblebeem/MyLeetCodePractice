//sequential search
ublic class Solution {
    public int findPeakElement(int[] nums) {
        for(int i = 1; i < nums.length; i ++){
            if(nums[i - 1] > nums[i]){
                return i - 1;
            }
        }
        
        return nums.length - 1;
    }
}


//binary search
//https://leetcode.com/discuss/18107/o-logn-solution-javacode
public class Solution {
    public int findPeakElement(int[] nums) {
        return helper(nums, 0, nums.length - 1);
    }
    
    private int helper(int[] nums, int start, int end){
        if(start == end){
            return start;
        }else if(start + 1 == end){
            if(nums[start] > nums[end]){
                return start;
            }else{
                return end;
            }
        }else{
            int mid = start + (end - start) / 2;
            if(nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]){
                return mid;
            }else if(nums[mid] < nums[mid - 1] && nums[mid] > nums[mid + 1]){
                return helper(nums, start, mid - 1);
            }else{
                return helper(nums, mid + 1, end);
            }
        }
    }
}


//Yet another two links
//https://leetcode.com/discuss/17793/find-the-maximum-by-binary-search-recursion-and-iteration
//https://leetcode.com/discuss/68999/java-solution-and-explanation-using-invariants
