// Backtracking
// line 19, need to NEW an ArrayList, CANNOT use subset(line 18) in line 19 directly! Every BACKTRACKING has this similar issue!
// 二刷：其实就是deep copy的问题嘛
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> subsets = new ArrayList<List<Integer>>();
        List<Integer> subset = new ArrayList<Integer>();
        generateSubsets(nums, 0, subset, subsets);
        return subsets;
    }
    
    private void generateSubsets(int[] nums, int start, List<Integer> subset, List<List<Integer>> subsets){
        if(start <= nums.length){
            subsets.add(subset);
        }
        for(int i = start; i < nums.length; i ++){
            subset.add(nums[i]);
            ArrayList<Integer> s = new ArrayList<Integer>(subset);
            generateSubsets(nums, i + 1, s, subsets);
            subset.remove(subset.size() - 1);
        }
    }
}


// 二刷Java version
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums == null || nums.length == 0){
            return res;
        }
        getSubsets(res, new ArrayList<Integer>(), 0, nums);
        return res;
    }
    
    private void getSubsets(List<List<Integer>> res, ArrayList<Integer> cur, int start, int[] nums){
        res.add(new ArrayList<Integer>(cur));
        if(start >= nums.length){
            return;
        }
        for(int i = start; i < nums.length; i ++){
            cur.add(nums[i]);
            getSubsets(res, cur, i + 1, nums);
            cur.remove(cur.size() - 1);
        }
    }
}


// Iteratively
// sort nums, then at every iteration, add the new element in nums to the end of every subset already exist
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums == null){
            return res;
        }
        res.add(new ArrayList<Integer>());
        for(int i = 0; i < nums.length; i ++){
            int size = res.size();
            for(int j = 0; j < size; j ++){
                List<Integer> cur = res.get(j);
                cur.add(nums[i]);
                res.add(new ArrayList<Integer>(cur));
                cur.remove(cur.size() - 1);
                //这个for循环里也可以按照下边这样写，突出一个对deep copy的理解
                // List<Integer> cur = new ArrayList<Integer>(res.get(j));
                // cur.add(nums[i]);
                // res.add(cur);
            }
        }
        return res;
    }
}


//Bit Manipulation
//https://leetcode.com/discuss/9213/my-solution-using-bit-manipulation
