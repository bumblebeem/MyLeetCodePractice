public class Solution {
    public int searchInsert(int[] nums, int target) {
        if(nums == null){
            return -1;
        }
        int i = 0;
        for(; i < nums.length; i ++){
            if(target <= nums[i]){
                break;
            }
        }
        return i;
    }
}


//Before I saw the discussions, I thought my solution was good...
//remember to return low in line 28
public class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        while(low <= high){
            int mid = low + (high - low) / 2;
            if(nums[mid] < target){
                low = mid + 1;
            }else if(nums[mid] == target){
                return mid;
            }else{
                high = mid - 1;
            }
        }
        return low;
    }
}

//28行和18行不好理解，18行为何是<=，28行为何return的是low


//Here is a link to my own conclusion:
//https://leetcode.com/discuss/85327/o-n-solution-%26-o-logn-solution-w-explanation


//听了九章算法的课之后，用如下写法，虽然自己写还是有bug，不过理解了很多！
public class Solution {
    public int searchInsert(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        int start = 0, end = nums.length - 1;
        while(start + 1 < end){
            int middle = (end - start) / 2 + start;
            if(target < nums[middle]){
                end = middle;
            } else if(target > nums[middle]){
                start = middle;
            } else{
                return middle;
            }
        }
        if(nums[start] >= target){
            return start;
        }else if(nums[end] >= target){
            return end;
        }else{
            return end + 1;
        }
    }
}
