/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 /*
  Here is solution one, inspired by the following link:
  https://leetcode.com/discuss/22898/the-bottom-up-o-n-solution-would-be-better
 */
class Solution {
public:
    int height(TreeNode* root){
        if(root == NULL){
            return 0;
        }
        int left = height(root -> left);
        if(left == -1){
            return -1;
        }
        int right = height(root -> right);
        if(right == -1){
            return -1;
        }
        if(abs(left - right) > 1){
            return -1;
        }
        return max(left, right) + 1;       //注意这一行和第二种方法的不同之处（line 58）
    }

    bool isBalanced(TreeNode* root) {
        return height(root) != -1;
    }
};

/*
  Here is another solution, which time complexity would be O(N^2)
*/
class Solution {
public:
    int abs(int a, int b){
        if(a > b){
            return a - b;
        }
        else{
            return b - a;
        }
    }

    int height(TreeNode* treenode){
        if(treenode == NULL){
            return 0;
        }
        return max(height(treenode->left), height(treenode->right)) + 1;
    }
    
    bool isBalanced(TreeNode* root) {
        if(!root){
            return true;
        }
        if(abs(height(root->left), height(root->right)) <= 1 
        && isBalanced(root->left) 
        && isBalanced(root->right)){
            return true;
        }
        return false;
    }
};

//Java version
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        if(Math.abs(getDepth(root.left) - getDepth(root.right)) - 1 <= 0 
        && isBalanced(root.left) && isBalanced(root.right)){
            return true;
        }
        return false;
    }
    
    public int getDepth(TreeNode node){
        if(node == null){
            return 0;
        }
        return Math.max(getDepth(node.left), getDepth(node.right)) + 1;
    }
}


//九章解法一：
class ResultType{
    public boolean isBalanced;
    public int depth;
    public ResultType(boolean isBalanced, int depth){
        this.isBalanced = isBalanced;
        this.depth = depth;
    }
} 

public class Solution {
    public boolean isBalanced(TreeNode root) {
        return helper(root).isBalanced;
    }
    
    private ResultType helper(TreeNode root){
        if(root == null){
            return new ResultType(true, 0);
        }
        
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
        if(!left.isBalanced || !right.isBalanced){
            return new ResultType(false, -1);
        }
        if(Math.abs(left.depth - right.depth) > 1){
            return new ResultType(false, -1);
        }
        
        return new ResultType(true, Math.max(left.depth, right.depth) + 1);
    }
}


//九章解法二：
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        return getDepth(root) != -1;
    }
    
    private int getDepth(TreeNode root){
        if(root == null){
            return 0;
        }
        int leftDepth = getDepth(root.left);
        int rightDepth = getDepth(root.right);
        if(Math.abs(leftDepth - rightDepth) > 1){
            return -1;
        }
        if(leftDepth == -1 || rightDepth == -1){
            return -1;
        }
        return Math.max(leftDepth, rightDepth) + 1;
    }
}


// 再刷一次AC！
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        int leftHeight = getHeight(root.left);
        int rightHeight = getHeight(root.right);
        if(Math.abs(leftHeight - rightHeight) > 1){
            return false;
        }
        return isBalanced(root.left) && isBalanced(root.right);
    }
    
    private int getHeight(TreeNode node){
        if(node == null){
            return 0;
        }
        return Math.max(getHeight(node.left), getHeight(node.right)) + 1;
    }
}
