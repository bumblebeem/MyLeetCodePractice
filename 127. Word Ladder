// https://discuss.leetcode.com/topic/16983/easy-76ms-c-solution-using-bfs
// http://www.jiuzhang.com/solutions/word-ladder/

// Solution 1: one-way BFS
public class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(!wordList.contains(endWord)){
            return 0;
        } 
        Queue<String> queue = new LinkedList<String>();
        queue.offer(beginWord);
        int ladder = 1;
        while(!queue.isEmpty()){
            int levelSize = queue.size();
            for(int i = 0; i < levelSize; i ++){
                String curWord = queue.poll();
                if(curWord.equals(endWord)){
                    return ladder;
                }
                for(int k = 0; k < curWord.length(); k ++){
                    for(char j = 'a'; j < 'z'; j ++){
                        char[] curWordArray = curWord.toCharArray();
                        if(curWordArray[k] != j){
                            curWordArray[k] = j;
                        }
                        String nextWord = new String(curWordArray);
                        if(wordList.contains(nextWord)){
                            queue.offer(nextWord);
                            wordList.remove(nextWord);
                        }
                    }
                }
            }
            ladder ++;
        }
        return 0;
    }
}

// 这应该是做过的比较难的BFS了吧。。
// 再刷的时候18行误写成break了，不应该。。而且29行也没有想起来写，这相当于图的遍历里的HashSet（防止重复遍历），这个地方要牢记！
// 不过现在OJ这个解法过不了了，会超时。。


// Solution 2: two-way BFS!!
public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        HashSet<String> beginSet = new HashSet<String>();
        HashSet<String> endSet = new HashSet<String>();
        int distance = 1;
        
        beginSet.add(beginWord);
        endSet.add(endWord);
        while(!beginSet.isEmpty() && !endSet.isEmpty()) {
            if(beginSet.size() > endSet.size()) {
                HashSet<String> temp = beginSet;
                beginSet = endSet;
                endSet = temp;
            }
            
            HashSet<String> next = new HashSet<String>();
            for(String curWord : beginSet) {
                for(int i = 0; i < curWord.length(); i ++) {
                    char[] curWordChar = curWord.toCharArray();
                    for(char c = 'a'; c <= 'z'; c ++) {
                        curWordChar[i] = c;
                        String intermediateWord = new String(curWordChar);
                        
                        if(endSet.contains(intermediateWord)) {
                            return distance + 1;
                        }
                        
                        if(wordList.contains(intermediateWord)) {
                            wordList.remove(intermediateWord);
                            next.add(intermediateWord);
                        }
                    }
                }
            }
            beginSet = next;
            
            distance ++;
        }
        
        return 0;
    }
}
