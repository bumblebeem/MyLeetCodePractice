public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<Integer>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return res;
        }

        // right, down, left, up
        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        int rows = matrix.length;
        int cols = matrix[0].length;
        boolean[][] visited = new boolean[rows][cols];
        
        res.add(matrix[0][0]);
        visited[0][0] = true;
        int cur = 2;
        int i = 0, y = 0;
        while(cur <= rows * cols){
            while(i + dx[0] < rows && y + dy[0] < cols && !visited[i + dx[0]][y + dy[0]]){
                res.add(matrix[i + dx[0]][y + dy[0]]);
                visited[i + dx[0]][y + dy[0]] = true;
                cur ++;
                i += dx[0];
                y += dy[0];
            }
            while(i + dx[1] < rows && y + dy[1] < cols && !visited[i + dx[1]][y + dy[1]]){
                res.add(matrix[i + dx[1]][y + dy[1]]);
                visited[i + dx[1]][y + dy[1]] = true;
                cur ++;
                i += dx[1];
                y += dy[1];
            }
            while(i + dx[2] >= 0 && y + dy[2] >= 0 && !visited[i + dx[2]][y + dy[2]]){
                res.add(matrix[i + dx[2]][y + dy[2]]);
                visited[i + dx[2]][y + dy[2]] = true;
                cur ++;
                i += dx[2];
                y += dy[2];
            }
            while(i + dx[3] >= 0 && y + dy[3] >= 0 && !visited[i + dx[3]][y + dy[3]]){
                res.add(matrix[i + dx[3]][y + dy[3]]);
                visited[i + dx[3]][y + dy[3]] = true;
                cur ++;
                i += dx[3];
                y += dy[3];
            }
        }
        return res;
    }
}

// 跟Spiral Matrix II很像

// 下边这是个更好的解法
// https://discuss.leetcode.com/topic/3713/super-simple-and-easy-to-understand-solution
