//Below link is a great explanation of this problem!
//https://leetcode.com/discuss/38336/solutions-partition-priority_queue-multiset-respectively

//QuickSelect: https://en.wikipedia.org/wiki/Quickselect
//THIS IS A VERY HELPFUL VIDEO: https://www.youtube.com/watch?v=SXXpkdruLfc
//Method 1: Use method similar to quiksort, with a pivot!
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        // the original quickSelect finds the kth smallest, so we use "nums.length + 1 - k" to 
        // convert it into kth largest as desired in this question
        return quickSelect(nums, 0, nums.length - 1, nums.length + 1 - k);
    }
    
    public int quickSelect(int[] nums, int left, int right, int k){
        if(left == right){
            return nums[left];
        }
        int pivotIndex = partition(nums, left, right);
        if(pivotIndex + 1 == k){
            return nums[pivotIndex];
        } else if(pivotIndex + 1 > k){
            return quickSelect(nums, left, pivotIndex - 1, k);
        } else {
            return quickSelect(nums, pivotIndex + 1, right, k);
        }
    }
    // quickSelect也可以写成下边注释掉的这个样子！
    // public int quickSelect(int[] nums, int left, int right, int k){
    //     while(true){
    //         if(left == right){
    //             return nums[left];
    //         }
    //         int pivotIndex = partition(nums, left, right);
    //         if(pivotIndex + 1 == k){
    //             return nums[pivotIndex];
    //         } else if(pivotIndex + 1 > k){
    //             right = pivotIndex - 1;
    //         } else{
    //             left = pivotIndex + 1;
    //         }
    //     }
    // }
    
    public int partition(int[] nums, int left, int right){
        int pivotValue = nums[left];
        int leftMark = left + 1;
        int rightMark = right;
        
        // the element in nums might not be distinct, so we use <=, >= instead of <, > in line 35 and 38
        while(true){
            while(leftMark < right && nums[leftMark] <= pivotValue){
                leftMark ++;
            }
            while(rightMark > left && nums[rightMark] >= pivotValue){
                rightMark --;
            }
            
            if(leftMark >= rightMark){
                break;
            } else {
                int temp = nums[leftMark];
                nums[leftMark] = nums[rightMark];
                nums[rightMark] = temp;
            }
        }
        
        int temp = nums[left];
        nums[left] = nums[rightMark];
        nums[rightMark] = temp;
        
        return rightMark;
    }
}


// ****************************以上是这道题需要重点掌握的方法**********************************


//The following implementation is not easy-understanding at all!
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        int left = 0, right = nums.length - 1;
        while(true){
            int pos = partition(nums, left, right);
            if(pos + 1 == k){
                return nums[pos];
            }else if(pos + 1 < k){
                left = pos + 1;
            }else{
                right = pos - 1;
            }
        }
    }
    
    private int partition(int[] nums, int left, int right){
        int pivot = nums[left];
        int l = left + 1, r = right;
        while(l <= r){
            if(pivot > nums[l] && pivot < nums[r]){
                int temp = nums[l];
                nums[l] = nums[r];
                nums[r] = temp;
                l ++;
                r --;
            }
            if(nums[l] >= pivot){
                l ++;
            }
            if(nums[r] <= pivot){
                r --;
            }
        }
        int temp = nums[left];
        nums[left] = nums[r];
        nums[r] = temp;
        return r;
    }
}


//Method 2: Use heap sort
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        build_max_heap(nums);
        for(int i = 0; i < k - 1; i ++){          //if we use i < k here, line 57 should be return nums[heapSize];
            int temp = nums[0];
            nums[0] = nums[heapSize - 1];
            nums[heapSize - 1] = temp;
            heapSize --;
            max_heapify(nums, 0);
        }
        return nums[0];
    }
    
    public int getLeftChild(int index){
        return (index << 1) + 1;
    }
    
    public int getRightChild(int index){
        return (index << 1) + 2;
    }
    
    public void max_heapify(int[] nums, int index){
        int max = index;
        
        int leftChild = getLeftChild(index), rightChild = getRightChild(index);
        if(leftChild < heapSize && nums[leftChild] > nums[max]){
            max = leftChild;
        }
        if(rightChild < heapSize && nums[rightChild] > nums[max]){
            max = rightChild;
        }
        
        if(index != max){
            int temp = nums[max];
            nums[max] = nums[index];
            nums[index] = temp;
            max_heapify(nums, max);
        }
    }
    
    public void build_max_heap(int[] nums){
        heapSize = nums.length;
        for(int i = (heapSize >> 1) - 1; i >= 0; i --){   //pay attention to i's initialization
            max_heapify(nums, i);
        }
    }
    
    private int heapSize;
}


//Method 3: Built-in priority queue(min heap solution & max heap solution)
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(k);
        for(int e : nums){
            if(queue.size() < k){
                queue.add(e);
            } else if(e > queue.peek()){
                queue.poll();
                queue.add(e);
            }
        }
        return queue.peek();
    }
}

public class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(nums.length, new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                return b - a;    //max heap, PriorityQueue in Java is min heap by default
            }
        });
        for(int e : nums){
            queue.add(e);
        }
        for(int i = 0; i < k - 1; i ++){
            queue.poll();
        }
        return queue.peek();
    }
}
