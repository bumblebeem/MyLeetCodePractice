/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int rob(TreeNode root) {
        int[] res = robHelper(root);
        return Math.max(res[0], res[1]);
    }
    
    private int[] robHelper(TreeNode root){
        if(root == null){
            return new int[2];
        }
        
        int[] left = robHelper(root.left);
        int[] right = robHelper(root.right);
        
        int[] res = new int[2];
        res[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
        res[1] = root.val + left[0] + right[0];
        
        return res;
    }
}


//res[0] means the value if we don't rob root, res[1] means the value if we rob root
//注意理解line 25 & 26


//Here is the naive solution though..
public class Solution {
    public int rob(TreeNode root) {
        if(root == null){
            return 0;
        }
        
        int val = root.val;
        
        if(root.left != null){
            val += rob(root.left.left) + rob(root.left.right);
        }
        if(root.right != null){
            val += rob(root.right.left) + rob(root.right.right);
        }
        
        return Math.max(val, rob(root.left) + rob(root.right));
    }
}


//Used HashMap to optimize the naive solution
public class Solution {
    public int rob(TreeNode root) {
        return robHelper(root, new HashMap<TreeNode, Integer>());
    }
    
    public int robHelper(TreeNode root, Map<TreeNode, Integer> map){
        if(root == null){
            return 0;
        }
        if(map.containsKey(root)){
            return map.get(root);
        }
        
        int val = root.val;
        
        if(root.left != null){
            val += robHelper(root.left.left, map) + robHelper(root.left.right, map);
        }
        if(root.right != null){
            val += robHelper(root.right.left, map) + robHelper(root.right.right, map);
        }
        
        int result = Math.max(val, robHelper(root.left, map) + robHelper(root.right, map));
        map.put(root, result);
        return result;
    }
}


//Here is a very good explanation link:
//https://leetcode.com/discuss/91899/step-by-step-tackling-of-the-problem
