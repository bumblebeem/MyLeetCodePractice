// https://discuss.leetcode.com/topic/16983/easy-76ms-c-solution-using-bfs
// http://www.jiuzhang.com/solutions/word-ladder/

// Solution 1: one-way BFS
public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        wordList.add(endWord);
        Queue<String> queue = new LinkedList<String>();
        queue.add(beginWord);
        int distance = 1;
        while(!queue.isEmpty()) {
            int curSize = queue.size();
            for(int j = 0; j < curSize; j ++) {
                String curWord = queue.poll();
                if(curWord.equals(endWord)) {
                    return distance;
                }
                char[] curWordChar = curWord.toCharArray();
                for(int i = 0; i < curWord.length(); i ++) {
                    for(char c = 'a'; c <= 'z'; c ++) {
                        if(curWordChar[i] == c){
                            continue;
                        }
                        char temp = curWordChar[i];
                        curWordChar[i] = c;
                        String intermediateWord = new String(curWordChar);
                        if(wordList.contains(intermediateWord)) {
                            queue.add(intermediateWord);
                            wordList.remove(intermediateWord);
                        }
                        curWordChar[i] = temp;
                    }
                }
            }
            distance ++;
        }
        return wordList.contains(endWord) ? 0 : distance;
    }
}

// 这应该是做过的比较难的BFS了吧，，再刷的时候有个BUG一直也没调试出来，郁闷。。


// Solution 2: two-way BFS!!
public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        HashSet<String> beginSet = new HashSet<String>();
        HashSet<String> endSet = new HashSet<String>();
        HashSet<String> visited = new HashSet<String>();
        int distance = 1;
        
        beginSet.add(beginWord);
        endSet.add(endWord);
        while(!beginSet.isEmpty() && !endSet.isEmpty()) {
            if(beginSet.size() > endSet.size()) {
                HashSet<String> temp = beginSet;
                beginSet = endSet;
                endSet = temp;
            }
            
            HashSet<String> next = new HashSet<String>();
            for(String curWord : beginSet) {
                for(int i = 0; i < curWord.length(); i ++) {
                    char[] curWordChar = curWord.toCharArray();
                    for(char c = 'a'; c < 'z'; c ++) {
                        curWordChar[i] = c;
                        String transformedWord = new String(curWordChar);
                        
                        if(endSet.contains(transformedWord)) {
                            return distance + 1;
                        }
                        
                        if(!visited.contains(transformedWord) && wordList.contains(transformedWord)) {
                            visited.add(transformedWord);
                            wordList.remove(transformedWord);
                            next.add(transformedWord);
                        }
                    }
                }
            }
            beginSet = next;
            distance ++;
        }
        
        return 0;
    }
}
