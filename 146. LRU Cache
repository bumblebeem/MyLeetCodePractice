public class LRUCache {
    public class DoubleLinkedNode{
        int key;
        int value;
        DoubleLinkedNode pre;
        DoubleLinkedNode post;
    }

    //Every time, add new nodes right after the head node
    private void addNode(DoubleLinkedNode node) {
        node.pre = head;
        node.post = head.post;
        
        head.post.pre = node;
        head.post = node;
    }

    private void removeNode(DoubleLinkedNode node) {
        node.pre.post = node.post;
        node.post.pre = node.pre;
    }

    private void moveToHead(DoubleLinkedNode node) {
        removeNode(node);
        addNode(node);
    }

    // tail is always there, the node before tail is the real tail of the double linked list
    private DoubleLinkedNode popTail() {
        DoubleLinkedNode removed = tail.pre;
        removeNode(removed);
        return removed;
    }

    
    private HashMap<Integer, DoubleLinkedNode> cache = new HashMap<Integer, DoubleLinkedNode>();
    private int count;
    private int capacity;
    private DoubleLinkedNode head;
    private DoubleLinkedNode tail;
    
    // initialize the LRU cache
    public LRUCache(int capacity) {
        count = 0;
        this.capacity = capacity;
        
        head = new DoubleLinkedNode();
        tail = new DoubleLinkedNode();
        
        head.pre = null;
        tail.post = null;
        head.post = tail;
        tail.pre = head;
    }
    
    public int get(int key) {
        DoubleLinkedNode node = this.cache.get(key);
        if(node != null) {
            moveToHead(node);
            return node.value;
        } else {
            return -1;
        }
    }
    
    public void put(int key, int value) {
        DoubleLinkedNode node = this.cache.get(key);
        
        if(node != null) {
            node.value = value;
            moveToHead(node);
        } else {
            DoubleLinkedNode newNode = new DoubleLinkedNode();
            newNode.key = key;
            newNode.value = value;
            
            this.cache.put(key, newNode);
            addNode(newNode);
            
            count ++;
            
            if(count > capacity) {
                DoubleLinkedNode last = popTail();
                this.cache.remove(last.key);
                count--;
            }
        }
    }
}

// Great Explanation:
// https://leetcode.com/discuss/20139/java-hashtable-double-linked-list-with-touch-of-pseudo-nodes

// 自己照着答案实现的时候，addNode这个函数出了问题！！
