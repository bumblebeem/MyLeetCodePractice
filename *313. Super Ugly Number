public class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        int[] ugly = new int[n];
        int[] idx = new int[primes.length];
        
        ugly[0] = 1;
        for(int i = 1; i < n; i ++){
            ugly[i] = Integer.MAX_VALUE;
            for(int j = 0; j < primes.length; j ++){
                ugly[i] = Math.min(ugly[i], ugly[idx[j]] * primes[j]);
            }
            
            for(int j = 0; j < idx.length; j ++){
                if(ugly[i] == ugly[idx[j]] * primes[j]){
                    idx[j] ++;
                }
            }
        }
        
        return ugly[n - 1];
    }
}


//Here is two more solutions
//https://leetcode.com/discuss/81411/java-three-methods-23ms-58ms-with-heap-performance-explained
