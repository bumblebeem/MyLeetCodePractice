public class Solution {
    public void setZeroes(int[][] matrix) {
        int col0 = 1, rows = matrix.length, cols = matrix[0].length;
        
        for(int i = 0; i < rows; i ++){
            if(matrix[i][0] == 0){
                col0 = 0;
            }
            for(int j = 1; j < cols; j ++){
                if(matrix[i][j] == 0){
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        
        for(int i = rows - 1; i >= 0; i --){
            for(int j = cols - 1; j >= 1; j --){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
        }
        
        if(col0 == 0){
            for(int i = 0; i < rows; i ++){
                matrix[i][0] = 0;
            }
        }
    }
}


//The main difference between this solution and the solution above is 
//how we form the final matrix. (Top-down or bottom-up)
public class Solution {
    public void setZeroes(int[][] matrix) {
        int col0 = 1, rows = matrix.length, cols = matrix[0].length;
        
        for(int i = 0; i < rows; i ++){
            if(matrix[i][0] == 0){
                col0 = 0;
            }
            for(int j = 1; j < cols; j ++){
                if(matrix[i][j] == 0){
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        
        for(int i = 1; i < rows; i ++){
            for(int j = 1; j < cols; j ++){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
        }
        
        if(matrix[0][0] == 0){
            for(int j = 0; j < cols; j ++){
                matrix[0][j] = 0;
            }
        }
        if(col0 == 0){
            for(int i = 0; i < rows; i ++){
                matrix[i][0] = 0;
            }
        }
    }
}


//Here is a very good explanation:(*Notice why we need variable col0!)
//https://leetcode.com/discuss/15997/any-shortest-o-1-space-solution
