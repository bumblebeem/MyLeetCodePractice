public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<Integer>();
        if(p.length() > s.length()){
            return res;
        }
        for(int i = 0; i <= s.length() - p.length(); i ++){
            if(isAnagrams(p, s.substring(i, i + p.length()))){
                res.add(i);
            }
        }
        return res;
    }
    
    private boolean isAnagrams(String a, String b){
        int[] map = new int[26];
        for(int i = 0; i < a.length(); i ++){
            map[a.charAt(i) - 'a'] ++;
            map[b.charAt(i) - 'a'] --;
        }
        for(int i = 0; i < 26; i ++){
            if(map[i] != 0){
                return false;
            }
        }
        return true;
    }
}

// 自己写的solution，没有第四行的剪枝就要超时，即使有这个剪枝，运行时间也很长。。


// 更高端的解法，第69行理解的很不好啊！
public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<Integer>();
        if(s == null || s.length() == 0 || p == null || p.length() == 0 || p.length() > s.length()){
            return res;
        }
        
        int[] hash = new int[256];
        // record each character in p to hash
        for(int i = 0; i < p.length(); i ++){
            hash[p.charAt(i)] ++;
        }
        // two pointers, initialize count to p's length
        int left = 0, right = 0, count = p.length();
        
        while(right < s.length()){
            // move right everytime, if the character exists in p's hash, decrease the count
            // current hash value >= 1 means the character is existing in p
            if(hash[s.charAt(right)] >= 1){
                count --;
            }
            hash[s.charAt(right)] --;
            right ++;
            
            // when the count is down to 0, means we found the right anagram
            // then add window's left to result list
            if(count == 0){
                res.add(left);
            }
            
            // if we find the window's size equals to p, then we have to move left (narrow the window) 
            // to find the new match window. ++ to reset the hash because we kicked out the left
            // only increase the count if the character is in p
            // the count >= 0 indicate it was original in the hash, cuz it won't go below 0
            if(right - left == p.length()){
                if(hash[s.charAt(left)] >= 0){
                    count ++;
                }
                hash[s.charAt(left)] ++;
                left ++;
            }
        }
        
        return res;
    }
}


// * a 10-line template that can solve most 'substring' problems
// https://discuss.leetcode.com/topic/30941/here-is-a-10-line-template-that-can-solve-most-substring-problems
