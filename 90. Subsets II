// Recursive solution
// https://discuss.leetcode.com/topic/22638/very-simple-and-fast-java-solution
public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums == null || nums.length == 0){
            return res;
        }
        Arrays.sort(nums);
        getSubsets(res, new ArrayList<Integer>(), 0, nums);
        return res;
    }
    
    private void getSubsets(List<List<Integer>> res, ArrayList<Integer> cur, int start, int[] nums){
        res.add(new ArrayList<Integer>(cur));
        if(start >= nums.length){
            return;
        }
        for(int i = start; i < nums.length; i ++){
            if(i != start && nums[i] == nums[i - 1]){
                continue;
            }
            cur.add(nums[i]);
            getSubsets(res, cur, i + 1, nums);
            cur.remove(cur.size() - 1);
        }
    }
}

// 如果想按照Subset I的思路用递归来做，就得把数组先排序！
// * 对line 20 - 22这个if的理解不够啊(因为事先已经把数组排序，这个if帮助跳过duplicate)
// 再刷的时候，20 - 22行还是没有自己写出来！！


// Iterative solution
// https://discuss.leetcode.com/topic/4661/c-solution-and-explanation
