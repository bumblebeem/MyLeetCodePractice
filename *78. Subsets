//Backtracking
//line 18, need to NEW an ArrayList, CANNOT use subset(line 18) in line 19 directly! Every BACKTRACKING has this similar issue!
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> subsets = new ArrayList<List<Integer>>();
        List<Integer> subset = new ArrayList<Integer>();
        generateSubsets(nums, 0, subset, subsets);
        return subsets;
    }
    
    private void generateSubsets(int[] nums, int start, List<Integer> subset, List<List<Integer>> subsets){
        if(start <= nums.length){
            subsets.add(subset);
        }
        for(int i = start; i < nums.length; i ++){
            subset.add(nums[i]);
            ArrayList<Integer> s = new ArrayList<Integer>(subset);
            generateSubsets(nums, i + 1, s, subsets);
            subset.remove(subset.size() - 1);
        }
    }
}


//Iteratively
//sort nums, then at every iteration, add the new element in nums to the end of every subset already exist
//NOT FAMILIAR with the grammar of line 33 & 37! ATTENTION: line 37 need to NEW an object, can't use it directly.
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        ArrayList<List<Integer>> subsets = new ArrayList<List<Integer>>();
        subsets.add(new ArrayList<Integer>());
        for(int i = 0; i < nums.length; i ++){
            int n = subsets.size();
            for(int j = 0; j < n; j ++){
                List<Integer> cur = new ArrayList<Integer>(subsets.get(j));
                cur.add(nums[i]);
                subsets.add(cur);
            }
        }
        return subsets;
    }
}


//Bit Manipulation
//https://leetcode.com/discuss/9213/my-solution-using-bit-manipulation
