// 法一：用一个map，以直线的slope做key，以slope等于这个数值的直线的个数做value
// 但是如果简单得用Double作为key的类型，会溢出；需要用到BigDecimal
// https://discuss.leetcode.com/topic/24011/accepted-java-solution-easy-to-understand/9
// 39-41行 BigDecimal的使用；需要因此import java.math.*;
/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
import java.math.*;

public class Solution {
    public int maxPoints(Point[] points) {
        if(points.length <= 0){
            return 0;
        }
        if(points.length <= 2){
            return points.length;
        }
        int res = 0;
        for(int i = 0; i < points.length; i ++){
            Map<BigDecimal, Integer> map = new HashMap<BigDecimal, Integer>();
            int sameX = 1;  // vertical line
            int samePoint = 0;
            for(int j = 0; j < points.length; j ++){
                if(i != j){
                    if((points[j].x == points[i].x) && (points[j].y == points[i].y)){
                        samePoint++;
                        // continue;
                    }
                    if(points[j].x == points[i].x){
                        sameX ++;
                        continue;
                    }
                    // k is slope of the line
                    BigDecimal dy = new BigDecimal(points[j].y - points[i].y);
                    BigDecimal dx = new BigDecimal(points[j].x - points[i].x);
                    BigDecimal k = dy.divide(dx, MathContext.DECIMAL128);
                    if(map.containsKey(k)){
                        map.put(k, map.get(k) + 1);
                    } else {
                        map.put(k, 2);   // 是2不是1，因为这时候的points[j]和points[i]是两个点
                    }
                    res = Math.max(samePoint + map.get(k), res);
                }
            }
            res = Math.max(sameX, res);
        }
        return res;
    }
}


// 法二：先算两个点的GCD，之后slope的值是除以最小公倍数
/*
    遍历每个点，看它和后面的每个点构成的直线上有多少个点
    对每个点建立map，斜率是key
    *斜率要用分数的形式，不要用double的形式存
    *计算分数时先求分子分母的最大公约数gcd，再都除以gcd
    重合的点特殊处理
*/
/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public class Solution {
    public int maxPoints(Point[] points) {
        if(points == null || points.length <= 0) {
            return 0;
        }
        if(points.length <= 2){
            return points.length;
        }
        int result = 0;
        HashMap<String, Integer> map = new HashMap<String, Integer>();
        for(int i = 0 ; i < points.length; i++){
            map.clear();
            int overlap = 0, max = 0;
            for(int j = i + 1 ; j < points.length; j++){
                int x = points[j].x - points[i].x;
        	    int y = points[j].y - points[i].y;
        	    if (x == 0 && y == 0){
        	        overlap++;
                    continue;
        	    }
       		    int gcd = generateGCD(x,y); 
    		    x /= gcd;
  		        y /= gcd;
    		    String key = x + ":" + y;       // :就是一个连接符，用什么都行
    		    if (map.containsKey(key)) {
    		        map.put(key, map.get(key) + 1);
    		    } else {
    		        map.put(key, 1);
    		    }
                max = Math.max(max, map.get(key));
            }
            result = Math.max(result, max + overlap + 1);
        }
        return result;
    }
    
    private int generateGCD(int x, int y) {
        if (y == 0) {
            return x;
        }
        return generateGCD(y, x % y);
    }
}
