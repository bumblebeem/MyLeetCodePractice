public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<String>();
        int len = s.length();
        for(int i = 1; i <= 3 && i < len - 2; i ++) {  
            for(int j = i + 1; j <= i + 3 && j < len - 1; j ++) {
                for(int k = j + 1; k <= j + 3 && k < len; k ++) { 
                    String address1 = s.substring(0, i);
                    String address2 = s.substring(i, j);
                    String address3 = s.substring(j, k);
                    String address4 = s.substring(k, len);
                    if(isValid(address1) && isValid(address2) && isValid(address3) && isValid(address4)) {
                        res.add(address1 + "." + address2 + "." + address3 + "." + address4);
                    }
                }
            }
        }
        return res;
    }
    
    public boolean isValid(String s) {
        if(s.length() == 0 || s.length() > 3 || Integer.parseInt(s) > 255 || (s.charAt(0) == '0' && s.length() > 1)){
            return false;
        }
        return true;
    }
}

//1.line 5, there must be i < len - 2, because there must be at least two
//valid position for j and k, seperately. Same for j < len - 1 in line 6
//2.line 22's if statement（后两个要注意，Integer.parseInt的使用以及最后一个条件。。）, not easy to find out all these conditions at once...
//(Especially how it deal with cases like "01")
//3.三重for循环的起止条件是难点！终止条件应该从k考虑到j再考虑到i，以及注意所对应的最里层循环substring下标的问题。。


//Another solution, using another method to deal with cases like "01"
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<String>();
        int len = s.length();
        for (int i = 1; i <= 3; i ++){  
            if (len - i > 9) continue;            
            for (int j = i + 1; j <= i + 3; j ++){  
                if (len - j > 6) continue;                
                for (int k = j + 1; k <= j + 3 && k < len; k ++){ 
                    int a,b,c,d;               
                    a = Integer.parseInt(s.substring(0,i));  
                    b = Integer.parseInt(s.substring(i,j)); //Notice that "01" can be parsed into 1. Need to deal with that later.
                    c = Integer.parseInt(s.substring(j,k));
                    d = Integer.parseInt(s.substring(k));
                    if (a>255 || b>255 || c>255 || d>255) continue; 
                    String ip = a + "." + b + "." + c + "." + d;
                    if (ip.length() < len + 3) continue;  // this is to reject those int's parsed from "01" or "00"-like substrings
                    res.add(ip);
                }
            }
        }
        return res;
    }
}


//Here is a DFS solution: 理解的不好！
//https://leetcode.com/discuss/15098/very-simple-dfs-solution
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<String>();
        restoreIp(s, res, 0, "", 0);
        return res;
    }

    private void restoreIp(String s, List<String> res, int idx, String restored, int count) {
        if (count > 4){
            return;
        }
        if (count == 4 && idx == s.length()){
            res.add(restored);
        } 
    
        for (int i = 1; i < 4; i++) {
            if (idx + i > s.length()){
                break;
            }
            String address = s.substring(idx, idx + i);
            if ((address.charAt(0) == '0' && address.length() > 1) || (i == 3 && Integer.parseInt(address) >= 256)){
                continue;    
            } 
            restoreIp(s, res, idx + i, restored + address + (count == 3 ? "" : "."), count + 1);
        }
    }
}
