/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 //well, remember to take advantage of the property of binary search trees, 
 //which is, node -> left -> val < node -> val < node -> right -> val. 
 //Moreover, both p and q will be the descendants of the root of the subtree that contains both of them. 
 //And the root with the largest depth is just the lowest common ancestor.
 
 /*
  recursive
*/
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // if(root == null){
        //     return null;
        // }
        if(root.val > p.val && root.val > q.val){
            return lowestCommonAncestor(root.left, p, q);
        } else if(root.val < p.val && root.val < q.val){
            return lowestCommonAncestor(root.right, p, q);
        } else {
            return root;
        }
    }
}

/*
  iterative
*/
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode cur = root;
        while(cur != null){
            if(cur.val > p.val && cur.val > q.val){
                cur = cur.left;
            } else if(cur.val < p.val && cur.val < q.val){
                cur = cur.right;
            } else {
                break;
            }
        }   
        return cur;
    }
}
