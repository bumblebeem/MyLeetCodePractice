class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size() == 0){
            return 0;
        }
        if(nums.size() == 1){
            return nums[0];
        }
        
        vector<int> a(nums.begin() + 1, nums.end());
        vector<int> b(nums.begin(), nums.end() - 1);
        
        return max(rob_original(a), rob_original(b));
    }
    
    int rob_original(vector<int>& nums){
        int pre = 0, cur = 0;
        for(int i = 0; i < nums.size(); i ++){
            int temp = max(cur, pre + nums[i]);
            pre = cur;
            cur = temp;
        }
        return cur;
    }
};


//https://discuss.leetcode.com/topic/14375/simple-ac-solution-in-java-in-o-n-with-explanation
//Java version
public class Solution {
    public int rob(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        if(nums.length == 1){
            return nums[0];
        }
        return Math.max(robHelper(nums, 0, nums.length - 2), robHelper(nums, 1, nums.length - 1));
    }
    
    private int robHelper(int[] nums, int start, int end) {
        int includeFirst = 0, excludeFirst = 0;
        for(int i = start; i <= end; i ++){
            int temp = includeFirst;
            includeFirst = Math.max(includeFirst, excludeFirst + nums[i]);
            excludeFirst = temp;
        }
        return Math.max(includeFirst, excludeFirst);
    }
}
