/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode cur = dummy;
        
        while(cur.next != null && cur.next.next != null){
            cur.next = swap(cur.next, cur.next.next);
            cur = cur.next.next;
        }
        
        return dummy.next;
    }
    
    public ListNode swap(ListNode node1, ListNode node2){
        node1.next = node2.next;
        node2.next = node1;
        return node2;
    }
}

// *below is a link to a recursive solution, didn't understand
// https://leetcode.com/discuss/14045/my-accepted-java-code-used-recursion


// 这个解法其实和第一种是一样的。。
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode current = dummy;
        while (current.next != null && current.next.next != null) {
            ListNode first = current.next;
            ListNode second = current.next.next;
            
            current.next = second;
            first.next = second.next;
            second.next = first;
            current = current.next.next;
        }
        return dummy.next;
    }
}
