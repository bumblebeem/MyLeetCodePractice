//sequential search
public class Solution {
    public int findPeakElement(int[] nums) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        int i = 0;
        for(; i + 1 < nums.length; i ++){
            if(nums[i] > nums[i + 1]){
                break;
            }
        }
        return i;
    }
}


//binary search
//https://leetcode.com/discuss/18107/o-logn-solution-javacode
public class Solution {
    public int findPeakElement(int[] nums) {
        return helper(nums, 0, nums.length - 1);
    }
    
    private int helper(int[] nums, int start, int end){
        if(start == end){
            return start;
        }else if(start + 1 == end){
            if(nums[start] > nums[end]){
                return start;
            }else{
                return end;
            }
        }else{
            int mid = start + (end - start) / 2;
            if(nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]){
                return mid;
            }else if(nums[mid] < nums[mid - 1] && nums[mid] > nums[mid + 1]){
                return helper(nums, start, mid - 1);
            }else{
                return helper(nums, mid + 1, end);
            }
        }
    }
}


//Yet another two links
//https://leetcode.com/discuss/17793/find-the-maximum-by-binary-search-recursion-and-iteration
//https://leetcode.com/discuss/68999/java-solution-and-explanation-using-invariants


//九章模板
class Solution {
    /**
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        // write your code here
        if(A == null || A.length == 0){
            return -1;
        }
        int start = 1, end = A.length - 2;
        while(start + 1 < end){
            int middle = (end - start) / 2 + start;
            if(A[middle] < A[middle + 1]){
                start = middle;
            } else if(A[middle] > A[middle + 1]){
                end = middle;
            } else{
                start = middle;
                //end = middle; 也可以
            }
        }
        if(A[start] < A[end]){
            return end;
        }else{
            return start;
        }
    }
}

//line 67,69用middle和middle-1比较也是可以的，这道题while中的写法很灵活啊
