/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private ListNode cur;
    
    public TreeNode sortedListToBST(ListNode head) {
        if(head == null){
            return null;
        }
        cur = head;
        return inorderTraverseHelper(0, countList(head) - 1);
    }
    
    private int countList(ListNode head){
        ListNode tra = head;
        int size = 1;
        while(tra.next != null){
            tra = tra.next;
            size ++;
        }
        return size;
    }
    
    private TreeNode inorderTraverseHelper(int start, int end){
        if(end < start){
            return null;
        }
        int mid = start + (end - start) / 2;
        
        TreeNode left = inorderTraverseHelper(start, mid - 1);
        
        TreeNode treenode = new TreeNode(cur.val);
        treenode.left = left;
        cur = cur.next;
        
        TreeNode right = inorderTraverseHelper(mid + 1, end);
        treenode.right = right;
        
        return treenode;
    }
}


//Lots of details need to be paid attention to... 
//The basic idea is not that hard, though. Use inorder traverse.
