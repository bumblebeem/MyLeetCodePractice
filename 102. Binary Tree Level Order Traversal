/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
/*
  Here is the basic solution based on BFS.
*/
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        vector<int> lvl;
        if(! root){
            return res;
        }
        queue<TreeNode*> p, c;
        TreeNode* curNode = root;
        p.push(curNode);
        while(! p.empty()){
            curNode = p.front();
            if(curNode -> left){
                c.push(curNode -> left);
            }
            if(curNode -> right){
                c.push(curNode -> right);
            }
            lvl.push_back(curNode -> val);
            p.pop();
            if(p.empty()){
                res.push_back(lvl);
                lvl.clear();
                while(! c.empty()){
                    p.push(c.front());
                    c.pop();
                }
            }
        }
    }
};

/*
  Here comes the better solution, which I learned from the discussion...
  用NULL作为层与层节点直接的分界线！！只用一个队列！
*/
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if(root == NULL){
            return result;
        }
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        vector<int> cur_vec;
        while(! q.empty()){
            TreeNode* cur = q.front();
            q.pop();
            if(cur != NULL){
                cur_vec.push_back(cur -> val);
                if(cur -> left){
                    q.push(cur -> left);
                }
                if(cur -> right){
                    q.push(cur -> right);
                }
            }
            else{
                result.push_back(cur_vec);
                cur_vec.clear();
                if(! q.empty()){
                    q.push(NULL);
                }
            }
        }
        return result;
    }
};

/*
  上一种利用null的方法摘抄自路人，路人果然是又坑又low啊，还是用一个变量记录每个level的节点数比较高端
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(root == null){
            return res;
        }
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        while(!q.isEmpty()){
            List<Integer> level = new LinkedList<Integer>();
            int size = q.size();
            for(int i = 0; i < size; i ++){
                TreeNode cur = q.poll();
                if(cur.left != null){
                    q.add(cur.left);
                }
                if(cur.right != null){
                    q.add(cur.right);
                }
                level.add(cur.val);
            }
            res.add(level);
        }
        return res;
    }
}
