public class Solution {
    int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        int col = matrix[0].length;
        int row = matrix.length;
        int[][] path = new int[row][col];
        int max = 1;
        for(int i = 0; i < row; i ++){
            for(int j = 0; j < col; j ++){
                int cur = dfs(matrix, path, i, j, row, col);
                max = Math.max(cur, max);
            }
        }
        return max;
    }
    
    private int dfs(int[][] matrix, int[][] path, int i, int j, int row, int col){
        if(path[i][j] != 0){
            return path[i][j];
        }
        int max = 1;
        for(int[] direction : directions){
            int next_i = i + direction[0];
            int next_j = j + direction[1];
            if(next_i < 0 || next_j < 0 || next_i >= row || next_j >= col || matrix[next_i][next_j] <= matrix[i][j]){
                continue;
            }
            int cur = dfs(matrix, path, next_i, next_j, row, col) + 1;
            max = Math.max(max, cur);
        }
        path[i][j] = max;
        return path[i][j];
    }
}


// 1. Do DFS from every cell
// 2. Compare every 4 direction and skip cells that are out of boundary or smaller
// 3. Get matrix max from every cell's max
// 4. Use matrix[x][y] <= matrix[i][j] so we don't need a visited[m][n] array
// 5. The key is to cache the distance because it's highly possible to revisit a cell
