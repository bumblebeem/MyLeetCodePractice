class Solution {
public:
    bool canJump(vector<int>& nums) {
        if(nums.size() == 0){
            return false;
        }
        int last = nums[nums.size() - 1];
        for(int i = nums.size() - 1; i >= 0; i --){
            if(i + nums[i] >= last){
                last = i;
            }
        }
        return last == 0;
    }
};

//greedy还处于不太会的阶段啊。。。

//Idea is to work backwards from the last index. 
//Keep track of the smallest index that can "jump" to the last index. 
//Check whether the current index can jump to this smallest index.

/*
    Here is another way of doing it..
*/
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int size = nums.size();
        int farest = 0;
        for(int i = 0; i < size; i ++){
            if(i > farest){
                return false;
            }
            farest = max(nums[i] + i, farest);
        }
        return true;
    }
};
