// This question could be transformed into question 53
// https://en.wikipedia.org/wiki/Maximum_subarray_problem
// https://leetcode.com/discuss/48378/kadanes-algorithm-since-mentioned-about-interviewer-twists

public class Solution {
    public int maxProfit(int[] prices) {
        int maxCur = 0, maxSoFar = 0;
        for(int i = 1; i < prices.length; i++) {
            maxCur = Math.max(0, maxCur + prices[i] - prices[i - 1]);
            maxSoFar = Math.max(maxCur, maxSoFar);
        }
        return maxSoFar;
    }
}


// 以下方法用了prefix sum，类似53题的解法解决了这一问题，不过理解的不好
public class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length < 2){
            return 0;
        }
        int prefixSum = 0;
        int max = 0;
        int min = 0;
        for(int i = 1; i < prices.length; i ++){
            prefixSum += prices[i] - prices[i - 1];
            max = Math.max(prefixSum - min, max);
            min = Math.min(prefixSum, min);
        }
        return max;
    }
}


// A very easy-to-understand version
// minPrice is the minimum price from day 0 to day i
// maxPro is the maximum profit we can get from day 0 to day i
// To get maxPro, just get the larger one between current maxPro and prices[i] - minPrice
public class Solution {
    public int maxProfit(int[] prices) {
        int maxPro = 0;
        int minPrice = Integer.MAX_VALUE;
        for(int i = 0; i < prices.length; i ++){
            minPrice = Math.min(prices[i], minPrice);
            maxPro = Math.max(maxPro, prices[i] - minPrice);
        }
        return maxPro;
    }
}
