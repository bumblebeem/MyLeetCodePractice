// BFS solution:
public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new LinkedList<String>();
        if(digits == null || digits.length() == 0) {
            return res;
        }
        
        String[] keyboards = new String[] {"none", "none", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        res.add("");
        
        for(int i = 0; i < digits.length(); i ++){
            int curDigit = digits.charAt(i) - '0';
            String possibleKeys = keyboards[curDigit];
            
            int size = res.size();
            for(int j = 0; j < size; j ++){
                String temp = res.remove(0);
                for(int k = 0; k < possibleKeys.length(); k ++){
                    res.add(temp + possibleKeys.charAt(k));
                }
            }
        }
        
        return res;
    }
}

// 就是每次循环取出之前所有可能生成的字符串，加入一个新的可能的字母，直到没有字母可加为止
// 第4行用LinkedList比ArrayList好，因为第18行要进行多次remove操作


// DFS solution:
public class Solution {
    private static final String[] KEYS = new String[]{ "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };

    public List<String> letterCombinations(String digits) {
        List<String> res = new LinkedList<String>();
        if(digits == null || digits.length() == 0){
            return res;
        }
        combination("", digits, 0, res);
        return res;
    }

    private void combination(String prefix, String digits, int offset, List<String> res) {
        if(offset >= digits.length()){
            res.add(new String(prefix));
            return;
        }
        String possibleKeys = KEYS[digits.charAt(offset) - '0'];
        for(int i = 0; i < possibleKeys.length(); i ++){
            combination(prefix + possibleKeys.charAt(i), digits, offset + 1, res);
        }
    }
}
