//Backtracking
//line 19, need to NEW an ArrayList, CANNOT use subset(line 18) in line 19 directly! Every BACKTRACKING has this similar issue!
//二刷：其实就是deep copy的问题嘛
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> subsets = new ArrayList<List<Integer>>();
        List<Integer> subset = new ArrayList<Integer>();
        generateSubsets(nums, 0, subset, subsets);
        return subsets;
    }
    
    private void generateSubsets(int[] nums, int start, List<Integer> subset, List<List<Integer>> subsets){
        if(start <= nums.length){
            subsets.add(subset);
        }
        for(int i = start; i < nums.length; i ++){
            subset.add(nums[i]);
            ArrayList<Integer> s = new ArrayList<Integer>(subset);
            generateSubsets(nums, i + 1, s, subsets);
            subset.remove(subset.size() - 1);
        }
    }
}


//二刷Java version
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums == null){
            return res;
        }
        helper(res, new ArrayList<Integer>(), 0, nums);
        return res;
    }
    
    private void helper(List<List<Integer>> res, List<Integer> subset, int len, int[] nums){
        res.add(new ArrayList<Integer>(subset));
        if(len == nums.length){
            return;
        }
        for(int i = len; i < nums.length; i ++){
            if(subset.contains(nums[i])){
                continue;
            }
            subset.add(nums[i]);
            helper(res, subset, i + 1, nums);
            subset.remove(subset.size() - 1);
        }
    }
}


//Iteratively
//sort nums, then at every iteration, add the new element in nums to the end of every subset already exist
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        ArrayList<List<Integer>> subsets = new ArrayList<List<Integer>>();
        subsets.add(new ArrayList<Integer>());
        for(int i = 0; i < nums.length; i ++){
            int n = subsets.size();
            for(int j = 0; j < n; j ++){
                List<Integer> cur = new ArrayList<Integer>(subsets.get(j));
                cur.add(nums[i]);
                subsets.add(cur);
            }
        }
        return subsets;
    }
}


//Bit Manipulation
//https://leetcode.com/discuss/9213/my-solution-using-bit-manipulation
