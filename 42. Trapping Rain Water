public class Solution {
    public int trap(int[] height) {
        int left = 0, right = height.length - 1;
        int maxleft = 0, maxright = 0;
        int water = 0;
        
        while(left <= right){
            maxleft = Math.max(maxleft, height[left]);
            maxright = Math.max(maxright, height[right]);
            
            if(maxleft > maxright){
                water += maxright - height[right];
                right --;
            }else{
                water += maxleft - height[left];
                left ++;
            }
        }
        
        return water;
    }
}


//The idea is: I calculated the stored water at each index a and b in my code. 
//At the start of every loop, I update the current maximum height from left side (that is from A[0,1...a]) 
//and the maximum height from right side(from A[b,b+1...n-1]). if(leftmax<rightmax) then, 
//at least (leftmax-A[a]) water can definitely be stored no matter what happens between [a,b], 
//since we know there is a barrier at the rightside(rightmax>leftmax). On the other side, 
//we cannot store more water than (leftmax-A[a]) at index a since the barrier at left is of height leftmax. 
//So, we know the water that can be stored at index a is exactly (leftmax-A[a]). 
//The same logic applies to the case when (leftmax>rightmax). At each loop we can make a and b one step closer. 
//Thus we can finish it in linear time.

//https://leetcode.com/discuss/10046/share-my-short-solution

//Yet another solution:
//https://leetcode.com/discuss/45812/7-lines-c-c


//二刷版本，easy-to-understand
public class Solution {
    public int trap(int[] height) {
        if(height.length == 0 || height == null){
            return 0;
        }
        int left = 0, right = height.length - 1;
        int leftHeight = height[0], rightHeight = height[height.length - 1];
        int water = 0;
        while(left < right){
            if(height[left] < height[right]){
                left ++;
                if(height[left] < leftHeight){
                    water += (leftHeight - height[left]);
                } else {
                    leftHeight = height[left];
                }
            } else{
                right --;
                if(height[right] < rightHeight){
                    water += (rightHeight - height[right]);
                } else {
                    rightHeight = height[right];
                }
            }
        }
        return water;
    }
}
