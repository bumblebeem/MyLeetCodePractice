/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// DFS solution
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<String>();
        printPath(root, res, "");
        return res;
    }
    
    private void printPath(TreeNode node, List<String> res, String temp){
        if(node == null){
            return;
        }
        if(node.left == null && node.right == null){
            res.add(temp + node.val);
            return;
        }
        if(node.left != null){
            printPath(node.left, res, temp + node.val + "->");
        }
        if(node.right != null){
            printPath(node.right, res, temp + node.val + "->");
        }
    }
}


// BFS solution
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<String>();
        if(root == null){
            return res;
        }
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        Queue<String> temp = new LinkedList<String>();
        q.add(root);
        temp.add("");
        while(!q.isEmpty()){
            TreeNode cur = q.poll();
            String str = temp.poll();
            if(cur.left == null && cur.right == null){
                res.add(str + cur.val);
            }
            if (cur.left != null){
                q.add(cur.left);
                temp.add(str + cur.val + "->");
            }
            if(cur.right != null){
                q.add(cur.right);
                temp.add(str + cur.val + "->");
            }
        }
        return res;
    }
}
