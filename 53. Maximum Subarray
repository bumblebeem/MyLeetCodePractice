class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int cur_max = nums[0];
        int max_result = nums[0];
        for(int i = 1; i <= nums.size() - 1; i ++){
            cur_max = max(cur_max + nums[i], nums[i]);
            max_result = max(max_result, cur_max);
        }
        return max_result;
    }
};

/*
  This problem was discussed by Jon Bentley (Sep. 1984 Vol. 27 No. 9 Communications of the ACM P885),
  the paragraph below was copied from his paper (with a little modifications):
  
  Algorithm that operates on arrays: it starts at the left end (element A[1]) and scans through to the right end (element A[n]), 
  keeping track of the maximum sum subvector seen so far. 
  The maximum is initially A[0]. Suppose we've solved the problem for A[1 .. i - 1];
  how can we extend that to A[1 .. i]? 
  The maximum sum in the first I elements is either the maximum sum in the first i - 1 elements (which we'll call MaxSoFar), 
  or it is that of a subvector that ends in position i (which we'll call MaxEndingHere).
  MaxEndingHere is either A[i] plus the previous MaxEndingHere, or just A[i], whichever is larger.
*/

/*
  Here is another more easy-understanding code!
  But it was written in java... Because it's more convenient for us to allocate the size of the array dp dynamically.
  Of course, the code below could be further simplified.
*/
public class Solution {
    public int maxSubArray(int[] nums) {
        int size = nums.length;
        int dp[] = new int[size];
        dp[0] = nums[0];
        int max = dp[0];
        for(int i = 1; i <= size - 1; i ++){
            dp[i] = nums[i];
            if(dp[i] > dp[i - 1] + dp[i]){
                max = Math.max(max, dp[i]);
                continue;
            }else{
                dp[i] += dp[i - 1];
                max = Math.max(max, dp[i]);
            }
        }
        return max;
    }
}


