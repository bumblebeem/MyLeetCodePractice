//Naive way
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size() <= 0){
            return 0;
        }
        vector<int> dp(nums.size());
        dp[0] = nums[0];
        dp[1] = max(dp[0], nums[1]);
        for(int i = 2; i < nums.size(); i ++){
            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        return dp[nums.size() - 1];
    }
};

//Java version
public class Solution {
    public int rob(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        if(nums.length == 1){
            return nums[0];
        }
        if(nums.length == 2){
            return Math.max(nums[0], nums[1]);
        }
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i = 2; i < nums.length; i ++){
            dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        return dp[nums.length - 1];
    }
}


//Optimized from O(n) space into O(1) space
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size() <= 0){
            return 0;
        }
        int prev = 0;
        int cur = 0;
        for(int i = 0; i < nums.size(); i ++){
            int temp = cur;
            cur = max(prev + nums[i], cur);
            prev = temp;
        }
        return cur;
    }
};
