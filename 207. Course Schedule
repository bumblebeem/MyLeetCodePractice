//BFS, using concept of topological order
//注意区分好prerequisites[i][0]与prerequisites[i][1]，后者是前者的prerequisite
public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Queue<Integer> queue = new LinkedList<Integer>();
        int[] indegree = new int[numCourses];
        int count = 0 ;
        for(int i = 0; i < prerequisites.length; i ++) {
            indegree[prerequisites[i][0]] ++;
        }
        for(int i = 0; i < indegree.length; i ++) {
            if(indegree[i] == 0) {
                queue.add(i);
                count ++;
            }
        }
        while(!queue.isEmpty()) {
            int curCourse = queue.poll();
            for(int i = 0; i < prerequisites.length; i ++) {
                if(curCourse == prerequisites[i][1]) {
                    indegree[prerequisites[i][0]]--;
                    if(indegree[prerequisites[i][0]] == 0) {
                        queue.add(prerequisites[i][0]);
                        count ++;
                    }
                }
            }
        }
        // for(int i = 0; i < indegree.length; i ++) {
        //     if(indegree[i] != 0) {
        //         return false;
        //     }
        // }
        // return true;
        return count == numCourses;
    }
}


//DFS, harder to understand..
public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList[] graph = new ArrayList[numCourses];
        for(int i = 0; i < numCourses; i ++) {
            graph[i] = new ArrayList<Integer>();
        }
        
        boolean[] visited = new boolean[numCourses];
        for(int i = 0; i < prerequisites.length; i ++) {
            graph[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        
        for(int i = 0; i < numCourses; i ++) {
            if(!dfs(graph, visited, i)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean dfs(ArrayList[] graph, boolean[] visited, int course) {
        if(visited[course]) {
            return false;
        }
        
        visited[course] = true;
        for(int i = 0; i < graph[course].size(); i ++){
            if(!dfs(graph, visited, (int)graph[course].get(i))){
                return false;
            }
        }
        visited[course] = false;
        
        return true;
    }
}
