public class Solution {
    public void solve(char[][] board) {
        if(board.length == 0 || board[0].length == 0) {
            return;
        }
        int row = board.length;
        int col = board[0].length;
        if(row < 2 || col < 2) {
            return;
        }
        
        for(int i = 0; i < col; i ++) {
            if(board[0][i] == 'O'){
                boundaryDFS(board, row, col, 0, i);
            }
            if(board[row - 1][i] == 'O') {
                boundaryDFS(board, row, col, row - 1, i);
            }
        }
        
        for(int i = 0; i < row; i ++) {
            if(board[i][0] == 'O'){
                boundaryDFS(board, row, col, i, 0);
            }
            if(board[i][col - 1] == 'O') {
                boundaryDFS(board, row, col, i, col - 1);
            }
        }
        
        for(int i = 0; i < row; i ++) {
            for(int j = 0; j < col; j ++) {
                if(board[i][j] == '*') {
                    board[i][j] = 'O';
                }else if(board[i][j] == 'O') {  //this "else if" can't be "if"...
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    private void boundaryDFS(char[][] board, int row, int col, int i, int j) {
        if(i < 0 || j < 0 || i >= row || j >= col) {
            return;
        }
        if(board[i][j] == 'O'){
            board[i][j] = '*';
        }
        if(i + 1 < row && board[i + 1][j] == 'O'){
            boundaryDFS(board, row, col, i + 1, j);
        }
        if(i - 1 > 0 && board[i - 1][j] == 'O') {
            boundaryDFS(board, row, col, i - 1, j);
        }
        if(j + 1 < col && board[i][j + 1] == 'O') {
            boundaryDFS(board, row, col, i, j + 1);
        }
        if(j - 1 > 0 && board[i][j - 1] == 'O') {
            boundaryDFS(board, row, col, i, j - 1);
        }
    }
}


//The idea comes from the observation that if a region is NOT captured, it is connected to the boundry. 

