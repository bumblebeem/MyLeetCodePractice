/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// Solution 1
public class Solution {
    public int countNodes(TreeNode root) {
        if(root == null){
            return 0;
        }
        TreeNode left = root, right = root;
        int height = 0;
        while(right != null){
            left = left.left;
            right = right.right;
            height ++;
        }
        if(left == null){
            return (1 << height) - 1;
        }
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
}


// Solution 2
public class Solution {
    public int countNodes(TreeNode root) {
        int height = getHeight(root);
        if(height < 0){
            return 0;
        } else {
            if(getHeight(root.right) == height - 1){
                return (1 << height) + countNodes(root.right);
            } else {
                return (1 << (height - 1)) + countNodes(root.left);
            }
        }
    }
    
    private int getHeight(TreeNode root){
        return root == null ? -1 : 1 + getHeight(root.left);
    }
}


// https://discuss.leetcode.com/topic/15533/concise-java-solutions-o-log-n-2
