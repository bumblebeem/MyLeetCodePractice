class MinStack {
    private Stack<Integer> minStack = new Stack<Integer>();
    private Stack<Integer> stack = new Stack<Integer>();
    
    public void push(int x) {
        stack.push(x);
        
        if(minStack.isEmpty()){
            minStack.push(x);
        }else{
            if(x <= minStack.peek()){
                minStack.push(x);
            }
        }
    }

    public void pop() {
        if(!minStack.isEmpty() && minStack.peek().equals(stack.peek())){
            minStack.pop();
        }
        stack.pop();
        // int peek = stack.pop();
        // if (!minStack.isEmpty() && peek == minStack.peek()) {
        //         minStack.pop();
        // }
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}

//*We can't use "minStack.peek() == stack.peek()" on line 18, because we need to compare 
//the value not the reference!!


//Here is a more concise solution with only one stack used, little bit hard to understand..
class MinStack {
    Stack<Integer> stack = new Stack<Integer>();
    int min = Integer.MAX_VALUE;
    
    public void push(int x) {
        if(x <= min){
            stack.push(min);
            min = x;
        }
        stack.push(x);
    }

    public void pop() {
        int peek = stack.pop();
        if(peek == min){
            min = stack.pop();
        }
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return min;
    }
}
