public class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] dp = new boolean[s.length() + 1];
        //Arrays.fill(dp, false);       boolean的默认初始化值就是false
        dp[0] = true;
        for(int i = 1; i <= s.length(); i ++){
            for(int j = 0; j < i; j ++){
                String cur = s.substring(j, i);
                if(wordDict.contains(cur) && dp[j] == true){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}


// 注意和上一种方法的区别（双重for循环处；这种做法就不能break）;所以这种方法不好！
public class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for(int i = 0; i < s.length(); i ++){
            for(int j = i + 1; j <= s.length(); j ++){
                String cur = s.substring(i, j);
                if(dp[i] && wordDict.contains(cur)){
                    dp[j] = true;
                }
            }
        }
        return dp[s.length()];
    }
}


// 上边的代码还有漏洞，遇到很大的case就要超时
// 优化的话，可以先算出dict里边最长的单词的长度，之后对内层的for循环进行修改，
// 如line 51 - 57. 同时也不要忘记line 55的break。
public class Solution {
    public boolean wordBreak(String s, List<String> dict) {
        if(s == null || s.length() == 0){
            return true;
        }
        int maxLength = getMaxWordLength(dict);
        boolean[] dp = new boolean[s.length() + 1];
        //Arrays.fill(dp, false);
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for(int len = 1; len <= maxLength && len <= i; len ++){
                String word = s.substring(i - len ,i);
                if(dp[i - len] == true && dict.contains(word)){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
    
    private int getMaxWordLength(List<String> dict){
        int maxLength = 0;
        for(String word : dict){
            maxLength = Math.max(maxLength, word.length());
        }
        return maxLength;
    }
}
