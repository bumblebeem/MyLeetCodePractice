public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
       List<List<Integer>> res = new ArrayList<List<Integer>>();
       List<Integer> sol = new ArrayList<Integer>();
       helper(res, sol, k, n, 1);
       return res;
    }
    
    private void helper(List<List<Integer>> res, List<Integer> sol, int k, int n, int begin){
        if(k == 0 && n == 0){    //n is the our target value
            res.add(new ArrayList<Integer>(sol));
            return;
        }
        for(int i = begin; i <= 9; i ++){
            if(n - i < 0){
                break;
            } else {
                sol.add(i);
                helper(res, sol, k - 1, n - i, i + 1);
                sol.remove(sol.size() - 1);
            }
        }
    }
}


//backtracking理解得进步了很多！

