/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class ResultType{
    int singlePath;
    int maxPath;
    ResultType(int singlePath, int maxPath){
        this.singlePath = singlePath;
        this.maxPath = maxPath;
    }
}

public class Solution {
    public int maxPathSum(TreeNode root) {
        ResultType res = helper(root);
        return res.maxPath;
    }
    
    private ResultType helper(TreeNode root){
        if(root == null){
            return new ResultType(0, Integer.MIN_VALUE);
        }
        
        //Divide
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
        //Conquer
        int singlePath = Math.max(left.singlePath, right.singlePath) + root.val;
        singlePath = Math.max(singlePath, 0);

        int maxPath = Math.max(left.maxPath, right.maxPath);
        maxPath = Math.max(maxPath, left.singlePath + right.singlePath + root.val);
        
        return new ResultType(singlePath, maxPath);
    }
}

// singlePath: 从root往下走到任意点的最大路径，这条路径可以不包含任何点
// maxPath: 从树中任意到任意点的最大路径，这条路径至少包含一个点

// http://www.jiuzhang.com/solutions/binary-tree-maximum-path-sum/


// 1. A path from start to end, goes up on the tree for 0 or more steps, then goes down for 0 or more steps. 
// Once it goes down, it can't go up. Each path has a highest node, 
// which is also the lowest common ancestor of all other nodes on the path.
// 2. A recursive method maxPathDown(TreeNode node) (1) computes the maximum path sum with highest node is the input node, 
// update maximum if necessary (2) returns the maximum sum of the path that can be extended to input node's parent.
public class Solution {
    int maxValue;
    
    public int maxPathSum(TreeNode root) {
        maxValue = Integer.MIN_VALUE;
        maxPathDown(root);
        return maxValue;
    }
    
    private int maxPathDown(TreeNode node) {
        if(node == null){
            return 0;
        }
        int left = Math.max(0, maxPathDown(node.left));
        int right = Math.max(0, maxPathDown(node.right));
        maxValue = Math.max(maxValue, left + right + node.val);
        return Math.max(left, right) + node.val;
    }
}
