public class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        int start = 0, end = nums.length - 1;
        while(start + 1 < end){
            int mid = (end - start) / 2 + start;
            if(target == nums[mid]){
                return mid;
            }
            if(nums[mid] > nums[end]){
                if(target >= nums[start] && target <= nums[mid]){
                    end = mid;
                }else{
                    start = mid;
                }
            }else{
                if(target >= nums[mid] && target <= nums[end]){
                    start = mid;
                }else{
                    end = mid;
                }
            }
        }
        if(nums[start] == target){
            return start;
        }
        if(nums[end] == target){
            return end;
        }
        return -1;
    }
}


// 重点是line12的分类讨论的方法，要不就用mid的值和end的值比，要不就用mid的值和start的值相比（见下边链接）
// http://www.jiuzhang.com/solutions/search-in-rotated-sorted-array/


// 哎，再刷思路有，但是重要的分类讨论（line 50的else里边的内容）还是没想到怎么讨论，，，
public class Solution {
    public int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        
        while(left + 1 < right){
            int mid = (right - left) / 2 + left;
            if(nums[mid] == target){
                return mid;   
            } else {
                if(nums[mid] > nums[left]){
                    if(target >= nums[left] && target < nums[mid]){
                        right = mid - 1;
                    } else {
                        left = mid + 1;
                    }
                } else {
                    if(target > nums[mid] && target <= nums[right]){
                        left = mid + 1;
                    } else {
                        right = mid - 1;
                    }
                }
            }
        }
        if(nums[left] == target){
            return left;   
        }
        if(nums[right] == target){
            return right;   
        }
        return -1;
    }
}
