/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node == null){
            return null;
        }
        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode, UndirectedGraphNode> hashmap = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        UndirectedGraphNode copy = new UndirectedGraphNode(node.label);
        hashmap.put(node, copy);
        queue.add(node);
        while(!queue.isEmpty()){
            UndirectedGraphNode cur = queue.poll();
            for(UndirectedGraphNode neighbor : cur.neighbors){
                if(!hashmap.containsKey(neighbor)){
                    UndirectedGraphNode newCopy = new UndirectedGraphNode(neighbor.label);
                    hashmap.put(neighbor, newCopy);
                    queue.add(neighbor);
                }
                hashmap.get(cur).neighbors.add(hashmap.get(neighbor));
            }
        }
        return copy;
    }
}


// 注意加深对27行的理解，其他的地方没什么问题。。

// https://discuss.leetcode.com/topic/4690/simple-java-iterative-bfs-solution-with-hashmap-and-queue
