/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
 //This first solution is quite straightford...
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int lenA = len(headA), lenB = len(headB);
        while(lenA > lenB){
            lenA --;
            headA = headA.next;
        }
        while(lenA < lenB){
            lenB --;
            headB = headB.next;
        }
        
        while(headA != headB){
            headA = headA.next;
            headB = headB.next;
        }
        return headA;
    }
    
    private int len(ListNode x){
        int length = 0;
        while(x != null){
            length ++;
            x = x.next;
        }
        return length;
    }
}

//Here comes another solution
//You can prove that: say A length = a + c, B length = b + c, after switching pointer, 
//pointer A will move another b + c steps, pointer B will move a + c more steps, 
//since a + c + b + c = b + c + a + c, it does not matter what value c is. 
//Pointer A and B must meet after a + c + b (b + c + a) steps. If c == 0, they meet at NULL.
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
        ListNode cur1 = headA;
        ListNode cur2 = headB;
        while(cur1 != cur2){
            cur1 = (cur1 == null ? headB : cur1.next);
            cur2 = (cur2 == null ? headA : cur2.next);
        }
        return cur1;
    }
}


//二刷Java solution
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int lenA = getLength(headA);
        int lenB = getLength(headB);
        ListNode curA = headA, curB = headB;
        while(lenA > lenB){
            lenA --;
            curA = curA.next;
        }
        while(lenA < lenB){
            lenB --;
            curB = curB.next;
        }
        while(curA != curB){
            curA = curA.next;
            curB = curB.next;
        }
        return curA;
    }
    
    private int getLength(ListNode head){
        int len = 0;
        while(head != null){
            len ++;
            head = head.next;
        }
        return len;
    }
}
