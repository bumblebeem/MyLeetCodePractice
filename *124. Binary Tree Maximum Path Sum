/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class ResultType{
    int singlePath;
    int maxPath;
    ResultType(int singlePath, int maxPath){
        this.singlePath = singlePath;
        this.maxPath = maxPath;
    }
}

public class Solution {
    public int maxPathSum(TreeNode root) {
        ResultType res = helper(root);
        return res.maxPath;
    }
    
    private ResultType helper(TreeNode root){
        if(root == null){
            return new ResultType(Integer.MIN_VALUE, Integer.MIN_VALUE);
        }
        
        //Divide
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
        //Conquer
        int singlePath = Math.max(0, Math.max(left.singlePath, right.singlePath)) + root.val;
        int temp = Math.max(left.maxPath, right.maxPath);
        int maxPath = Math.max(temp, 
            Math.max(left.singlePath, 0) + Math.max(right.singlePath, 0)+ root.val);
        
        return new ResultType(singlePath, maxPath);
    }
}

// singlePath: 从root往下走到任意点的最大路径，这条路径至少包含一个点
// maxPath: 从树中任意到任意点的最大路径，这条路径至少包含一个点


//http://www.jiuzhang.com/solutions/binary-tree-maximum-path-sum/
