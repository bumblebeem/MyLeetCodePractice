/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
/*
Method 1, Recursive
*/
int max(int a, int b){
    return a > b ? a : b;
}
 
int maxDepth(struct TreeNode* root) {
    if(root == NULL){
        return 0;
    }
    return max(maxDepth(root -> left), maxDepth(root -> right)) + 1;
}

//与tree相关的问题，注意先要判断root是否为NULL

//return的深度，最后需要加一！！


/*
Method 2, Iterative(BFS)
*/
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == NULL){
            return 0;
        }
        int depth = 0;
        queue<TreeNode*> parent, children;
        parent.push(root);
        while(! parent.empty()){
            TreeNode* current_node = parent.front();
            if(current_node -> left){
                children.push(current_node -> left);
            }
            if(current_node -> right){
                children.push(current_node -> right);
            }
            parent.pop();
            if(parent.empty()){
                while(! children.empty()){
                    parent.push(children.front());
                    children.pop();
                }
                depth ++;
            }
        }
        return depth;
    }
};

//竟然忘记了加上第50行处if(parent.empty())的判断。。。parent队列空了说明这一层的节点都处理完了，此时需要深度加一

/*
Best Answer Found in Discussion
more concise than my BFS

line 81 is key to reduce to two queue into one queue
*/
int maxDepth(TreeNode *root)
{
    if(root == NULL)
        return 0;

    int res = 0;
    queue<TreeNode *> q;
    q.push(root);
    while(!q.empty())
    {
        ++ res;
        for(int i = 0, n = q.size(); i < n; ++ i)
        {
            TreeNode *p = q.front();
            q.pop();

            if(p -> left != NULL)
                q.push(p -> left);
            if(p -> right != NULL)
                q.push(p -> right);
        }
    }

    return res;
}

//Java version, don't forget line 107
public class Solution {
    public int maxDepth(TreeNode root) {
        int depth = 0;
        if(root == null) {
            return depth;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while(!queue.isEmpty()) {
            depth ++;
            int levelSize = queue.size();
            for(int i = 0; i < levelSize; i ++) {
                TreeNode cur = queue.poll();
                if(cur.left != null) {
                    queue.add(cur.left);
                }
                if(cur.right != null) {
                    queue.add(cur.right);
                }
            }
        }
        return depth;
    }
}
