public class Solution {
    public int candy(int[] ratings) {
        int[] candies = new int[ratings.length];
        Arrays.fill(candies, 1);
        int res = 0;
        
        for(int i = 1; i < ratings.length; i ++) {
            if(ratings[i] > ratings[i - 1]) {
                candies[i] = candies[i - 1] + 1;
            }
        }
        
        for(int i = ratings.length - 1; i > 0; i --) {
            if(ratings[i - 1] > ratings[i]) {
                candies[i - 1] = Math.max(candies[i - 1], candies[i] + 1);
            }
        }
        
        for(int i = 0; i < candies.length; i ++) {
            res += candies[i];
        }
        
        return res;
    }
}


//There is another way, using only one-pass and constant space, but difficult to understand
//https://leetcode.com/discuss/23835/one-pass-constant-space-java-solution
//https://leetcode.com/discuss/43581/solutions-given-explanation-time-with-space-other-with-space
