/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private ListNode cur;
    
    public TreeNode sortedListToBST(ListNode head) {
        if(head == null){
            return null;
        }
        cur = head;
        return inorderTraversalHelper(0, countNodes(head) - 1);
    }
    
    //count nodes in a linked list is easy
    private int countNodes(ListNode head){
        int count = 0;
        if(head == null){
            return count;
        }
        ListNode temp = head;
        while(temp != null){
            count ++;
            temp = temp.next;
        }
        return count;
    }
    
    private TreeNode inorderTraversalHelper(int start, int end){
        if(start > end){
            return null;
        }
        
        int mid = start + (end - start) / 2;
        
        TreeNode node = new TreeNode(0);
        
        node.left = inorderTraversalHelper(start, mid - 1);
        node.val = cur.val;
        cur = cur.next;
        node.right = inorderTraversalHelper(mid + 1, end);
        
        return node;
    }
}


//The basic idea is to use inorder traverse.

//two solutions 这道题理解的不好
//https://discuss.leetcode.com/topic/8141/share-my-o-1-space-and-o-n-time-java-code
//https://discuss.leetcode.com/topic/35997/share-my-java-solution-1ms-very-short-and-concise
