public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        for(int k = 0; k <= nums.length - 3; k ++){
            int low = k + 1, high = nums.length - 1;
            if(k == 0 || nums[k] != nums[k - 1]){
                while(low < high){
                    if(nums[k] + nums[low] + nums[high] > 0){
                        high --;
                    } else if(nums[k] + nums[low] + nums[high] < 0){
                        low ++;
                    } else {
                        res.add(Arrays.asList(nums[k], nums[low], nums[high]));
                        while(low < high && nums[low] == nums[low + 1]){
                            low ++;
                        }
                        while(low < high && nums[high] == nums[high - 1]){
                            high --;
                        }
                        low ++;
                        high --;
                    } 
                }
            }
        }
        return res;
    }
}

// 本质是two pointers

// 注意line 7, 15, 18的跳过重复元素的操作，这个操作既可以让最后res中的解没有重复，又可以避免很多重复计算，提升效率！！
// (就是这个优化没想到导致超时）

// 注意line 14的Arrays.asList的语法~
