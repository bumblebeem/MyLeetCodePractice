// Naive solution
class Queue {
public:
    stack<int> sta;
    stack<int> que;
    // Push element x to the back of queue.
    void push(int x) {
        while(! que.empty()){
            sta.push(que.top());
            que.pop();
        }
        sta.push(x);
        while(! sta.empty()){
            que.push(sta.top());
            sta.pop();
        }
    }

    // Removes the element from in front of queue.
    void pop(void) {
        que.pop();
    }

    // Get the front element.
    int peek(void) {
        return que.top();
    }

    // Return whether the queue is empty.
    bool empty(void) {
        return que.size() == 0;
    }
};

// The trick here is to use two stacks...

// Java version
class MyQueue {
    Stack<Integer> stack = new Stack<Integer>();
    Stack<Integer> queue = new Stack<Integer>();
    
    // Push element x to the back of queue.
    public void push(int x) {
        while(!queue.isEmpty()){
            stack.push(queue.pop());
        }
        stack.push(x);
        while(!stack.isEmpty()){
            queue.push(stack.pop());
        }
    }

    // Removes the element from in front of queue.
    public void pop() {
        queue.pop();
    }

    // Get the front element.
    public int peek() {
        return queue.peek();
    }

    // Return whether the queue is empty.
    public boolean empty() {
        return queue.isEmpty();
    }
}


// *Advanced solution
// I have one input stack, onto which I push the incoming elements, and one output stack, 
// from which I peek/pop. I move elements from input stack to output stack when needed, 
// i.e., when I need to peek/pop but the output stack is empty. When that happens, 
// I move all elements from input to output stack, thereby reversing the order so it's the correct order for peek/pop.
// The loop in peek does the moving from input to output stack. Each element only ever gets moved like that once, 
// though, and only after we already spent time pushing it, so the overall amortized cost for each operation is O(1).
// https://discuss.leetcode.com/topic/17974/short-o-1-amortized-c-java-ruby
class MyQueue {
    Stack<Integer> input = new Stack<Integer>();
    Stack<Integer> output = new Stack<Integer>();
    
    // Push element x to the back of queue.
    public void push(int x) {
        input.push(x);
    }

    // Removes the element from in front of queue.
    public void pop() {
        peek();
        output.pop();
    }

    // Get the front element.
    public int peek() {
        if(output.empty()){
            while(!input.empty()){
                output.push(input.pop());
            }
        }
        return output.peek();
    }

    // Return whether the queue is empty.
    public boolean empty() {
        return input.empty() && output.empty();
    }
}


// 再刷虽然没有直接想到第二种解法，但是看了一下就理解并且一次AC了
class MyQueue {
    Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();
    
    // Push element x to the back of queue.
    public void push(int x) {
        s1.push(x);
    }

    // Removes the element from in front of queue.
    public void pop() {
        this.peek();
        s2.pop();
    }

    // Get the front element.
    public int peek() {
        if(!s2.isEmpty()){
            return s2.peek();
        } else {
            while(!s1.isEmpty()){
                s2.push(s1.pop());
            }
            return s2.peek();
        }
    }

    // Return whether the queue is empty.
    public boolean empty() {
        return s1.isEmpty() && s2.isEmpty();
    }
}
