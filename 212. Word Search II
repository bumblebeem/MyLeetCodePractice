class TrieNode {
    public String s;
    public boolean isWord;
    public HashMap<Character, TrieNode> children;
    
    public TrieNode() {
        s = "";
        isWord = false;
        children = new HashMap<Character, TrieNode>();
    }
}

class TrieTree {
    public TrieNode root;
    
    public TrieTree() {
        root = new TrieNode();
    }
    
    public void insert(String s){
        TrieNode cur = root;
        for(int i = 0; i < s.length(); i ++){
            char curChar = s.charAt(i);
            if(cur.children.containsKey(curChar)){
                cur = cur.children.get(curChar);
            } else {
                cur.children.put(curChar, new TrieNode());
                cur = cur.children.get(curChar);
            }
        }
        cur.s = s;
        cur.isWord = true;
    }
    
    public boolean findWord(String s){
        TrieNode cur = root;
        for(int i = 0; i < s.length(); i ++){
            char curChar = s.charAt(i);
            if(cur.children.containsKey(curChar)){
                cur = cur.children.get(curChar);
            } else {
                return false;
            }
        }
        return cur.isWord;
    }
}

public class Solution {
    int[] dx = {0, 0, 1, -1};
    int[] dy = {1, -1, 0, 0};

    public void dfs(char[][] board, int x, int y, TrieNode root, ArrayList<String> res){
        if(root.isWord && !res.contains(root.s)){
            res.add(root.s);
        }
        if(x < 0 || x >= board.length || y < 0 || y >= board[0].length || root == null){
            return;
        }
        if(root.children.containsKey(board[x][y])){
            for(int i = 0; i < 4; i ++){
                char temp = board[x][y];
                board[x][y] = '#';
                dfs(board, x + dx[i], y + dy[i], root.children.get(temp), res);
                board[x][y] = temp;
            }
        }
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        ArrayList<String> res = new ArrayList<String>();
        
        TrieTree tree = new TrieTree();
        for(String word : words){
            tree.insert(word);
        }
        
        for(int i = 0; i < board.length; i ++){
            for(int j = 0; j < board[0].length; j ++){
                dfs(board, i, j, tree.root, res);
            }
        }
        
        return res;
    }
}
