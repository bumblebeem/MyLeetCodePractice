/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        if(root == null){
            return;
        }
    
        TreeNode leftChild = root.left;
        TreeNode rightChild = root.right;
        
        flatten(leftChild);  //the left subtree of root is flattened
        flatten(rightChild);  //the right subtree of root is flattened
        
        root.left = null;  //modify the left child of the root
        root.right = leftChild; //modify the right child of the root 
        TreeNode cur = root;
        while(cur.right != null){
            cur = cur.right;
        }
        cur.right = rightChild;  //line 25 - 28 find the end of falttened left subtree
    }
}


//The idea is very simple:
//1.flatten left subtree
//2.flatten right subtree
//3.concatenate root -> left flatten subtree -> right flatten subtree

//https://discuss.leetcode.com/topic/19087/my-recursive-solution-is-easy-and-clean
