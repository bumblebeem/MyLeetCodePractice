// O(n) time complexity
public class Solution {
    public int findDuplicate(int[] nums) {
        if(nums == null || nums.length == 0){
            return Integer.MIN_VALUE;
        }
        int slow = nums[0];
        int fast = nums[nums[0]];
        while(slow != fast){
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        fast = 0;
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return fast;
    }
}

// 和142题很像，理解的很不好。。


// O(nlogn) time complexity
public class Solution {
    public int findDuplicate(int[] nums) {
        int low = 1, high = nums.length - 1;
        while(low < high){
            int mid = (high - low) / 2 + low;   
            int count = 0;
            for(int i : nums){
                if(i <= mid){
                    count ++;
                }
            }
            if(count <= mid){
                low = mid + 1;   
            } else {
                high = mid;
            }
        }
        return low;
    }
}
