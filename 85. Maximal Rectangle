// 这道题如果联想不到84题，感觉根本做不出来啊，利用84题的话就比较容易了。。
// https://siddontang.gitbooks.io/leetcode-solution/content/array/maximal_rectangle.html

public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        
        int row = matrix.length;
        int col = matrix[0].length;
        int[][] heightChart = new int[row][col];
        for(int i = 0; i < row; i ++){
            for(int j = 0; j < col; j ++){
                if(matrix[i][j] == '0'){
                    heightChart[i][j] = 0;   
                } else {
                    heightChart[i][j] = (i == 0) ? 1 : (heightChart[i - 1][j] + 1);
                }
            }
        }
        
        int res = 0;
        for(int i = 0; i < row; i ++){
            res = Math.max(res, largestRectangleArea(heightChart[i]));
        }
        return res;
    }
    
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<Integer>();
        int i = 0;
        int maxArea = 0;
        
        while(i < heights.length){
            if(stack.isEmpty() || heights[i] >= heights[stack.peek()]){
                stack.push(i);
                i ++;
            } else {
                int height = heights[stack.pop()];
                int width = stack.isEmpty() ? i : i - stack.peek() - 1;
                maxArea = Math.max(maxArea, width * height);
            }
        }
        while(!stack.isEmpty()){
            int height = heights[stack.pop()];
            int width = stack.isEmpty() ? i : i - stack.peek() - 1;
            maxArea = Math.max(maxArea, width * height);
        }
        
        return maxArea;
    }
}


// * A DP solution
// https://discuss.leetcode.com/topic/6650/share-my-dp-solution
