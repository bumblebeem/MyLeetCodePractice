// Solution 1:
public class Solution {
    public int lengthLongestPath(String input) {
        if(input == null || input.length() == 0 || !input.contains(".")){
            return 0;
        }
        
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(0); 
        int maxLen = 0;
        for(String s : input.split("\n")){
            int level = s.lastIndexOf("\t") + 1;
            while(level + 1 < stack.size()){
                stack.pop();
            }
            int curLen = stack.peek() + s.length() - level + 1;
            stack.push(curLen);
            if(s.contains(".")){
                maxLen = Math.max(maxLen, curLen - 1);
            }
        }
        return maxLen;
    }
}

// 思路不算很难，然而有以下两个难点：
// 1. \t和\n在字符串里没有用escape，所以\t只占一个字符，\n也是只占一个字符！！\\t这样，才是占了两个字符！！这里浪费了很多时间！
// 2. 16行和19行的加一减一有点混乱啊。。


// Solution 2:
// https://scottduan.gitbooks.io/leetcode-review/content/longest_absolute_file_path.html
public class Solution {
    public int lengthLongestPath(String input) {
        if(input == null || input.length() == 0 || !input.contains(".")){
            return 0;
        }
        
        Stack<Integer> stack = new Stack<Integer>();
        int curLen = 0;
        int maxLen = -1;
        for(String s : input.split("\n")){
            int tabs = 0;
            while(s.charAt(tabs) == '\t'){
                tabs ++;
            }
            while(tabs < stack.size()){
                curLen -= stack.pop();
            }
            s = s.substring(tabs);
            if(s.contains(".")){
                maxLen = Math.max(maxLen, curLen + s.length());
            } else {
                curLen += s.length() + 1;
                stack.push(s.length() + 1);
            }
        }
        return maxLen;
    }
}

// 这种写法比之前的第一种好理解一些，尤其是54行55行的两个加一更好理解，这里加的是路径到此结束时最后那个/
