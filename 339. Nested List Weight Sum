/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        int[] sum = new int[1];
        dfs(nestedList, sum, 1);
        return sum[0];
    }
    
    private void dfs(List<NestedInteger> nestedList, int[] sum, int layer){
        for(NestedInteger e : nestedList){
            if(e.isInteger()){
                sum[0] += e.getInteger() * layer;
            } else {
                dfs(e.getList(), sum, layer + 1);
            }
        }
    }
}
