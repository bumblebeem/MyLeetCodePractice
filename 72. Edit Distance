public class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[][] dp = new int[m + 1][n + 1];
        for(int i = 1; i <= m; i ++) {
            dp[i][0] = i;
        }
        for(int j = 1; j <= n; j ++) {
            dp[0][j] = j;
        }
        
        for(int i = 1; i <= m; i ++) {
            for(int j = 1; j <= n; j ++) {
                if(word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j - 1] + 1, Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1));
                }
            }
        }
        return dp[m][n];
    }
}


//we can further optimize space complexity
//https://leetcode.com/discuss/43398/20ms-detailed-explained-c-solutions-o-n-space


//二刷版本：
public class Solution {
    public int minDistance(String word1, String word2) {
        if(word1 == null || word1.length() == 0){
            return word2.length();
        }
        if(word2 == null || word2.length() == 0){
            return word1.length();
        }
        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
        for(int i = 0; i <= word1.length(); i ++){
            dp[i][0] = i;
        }
        for(int i = 0; i <= word2.length(); i ++){
            dp[0][i] = i;
        }
        for(int i = 1; i <= word1.length(); i ++){
            for(int j = 1; j <= word2.length(); j ++){
                if(word1.charAt(i - 1) == word2.charAt(j - 1)){
                    dp[i][j] = Math.min(
                        dp[i - 1][j - 1],
                        Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)
                    );
                } else {
                    dp[i][j] = Math.min(
                        dp[i - 1][j - 1] + 1,
                        Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)
                    );
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}

//dp[i][j]的含义是word1的前i个字符和word2的前j个字符的最短edit distance

