//Naive solution
public class Solution {
    public int findMin(int[] nums) {
        for(int i = 1; i < nums.length; i ++){
            if(nums[i] < nums[i - 1]){
                return nums[i];
            }
        }
        return nums[0];
    }
}


//Binary search solution!!
//不过理解的还不是非常到位啊！比如第28行high = mid,而不是high = mid - 1
public class Solution {
    public int findMin(int[] nums) {
        int low = 0, high = nums.length - 1;
        
        while(low < high){
            if(nums[low] < nums[high]){
                return nums[low];
            }
            int mid = low + (high - low) / 2;
            if(nums[mid] >= nums[low]){
                low = mid + 1;
            }else{
                high = mid;
            }
        }
        return nums[low];
    }
}


//九章算法的解法
public class Solution {
    /**
     * @param nums: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] nums) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        
        int start = 0, end = nums.length - 1;
        int target = nums[nums.length - 1];
        while(start + 1 < end){
            int middle = (end - start) / 2 + start;
            if(nums[middle] > target){
                start = middle;
            }else if(nums[middle] < target){
                end = middle;
            }
        }
        if(nums[start] <= target){
            return nums[start];
        }else{
            return nums[end];
        }
    }
}


//这道题的实质是找到FISRT position <= LAST NUMBER!!!
