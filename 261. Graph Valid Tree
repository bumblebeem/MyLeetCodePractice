// 1. BFS solution:
public class Solution {
    public boolean validTree(int n, int[][] edges) {
        if(n <= 0){
            return false;
        }
        if(edges.length != n - 1){
            return false;
        }
        
        Map<Integer, Set<Integer>> graph = initializeGraph(n, edges);
        Queue<Integer> queue = new LinkedList<Integer>();
        Set<Integer> visited = new HashSet<Integer>();
        
        queue.offer(0);
        while(!queue.isEmpty()){
            int curNode = queue.poll();
            visited.add(curNode);
            for(Integer neighbor : graph.get(curNode)){
                if(!visited.contains(neighbor)){
                    queue.offer(neighbor);
                }
            }
        }
        
        return visited.size() == n;
    }
    
    private Map<Integer, Set<Integer>> initializeGraph(int n, int[][] edges){
        Map<Integer, Set<Integer>> graph = new HashMap<Integer, Set<Integer>>();
        for(int i = 0; i < n; i ++){
            graph.put(i, new HashSet<Integer>());
        }
        for(int i = 0; i < edges.length; i ++){
            int node1 = edges[i][0];
            int node2 = edges[i][1];
            graph.get(node1).add(node2);
            graph.get(node2).add(node1);
        }
        return graph;
    }
}


// 2. DFS solution:
// 注意对74行的理解
public class Solution {
    public boolean validTree(int n, int[][] edges) {
        if(n <= 0){
            return false;
        }
        if(edges.length != n - 1){
            return false;
        }
        
        Map<Integer, Set<Integer>> graph = initializeGraph(n, edges);
        Set<Integer> visited = new HashSet<Integer>();
        
        if(!helper(0, -1, graph, visited)){
            return false;
        }
        
        return visited.size() == n;
    }
    
    private boolean helper(int cur, int parent, Map<Integer, Set<Integer>> graph, Set<Integer> visited){
        if(visited.contains(cur)){
            return false;
        }
        
        visited.add(cur);
        
        for(int neighbor : graph.get(cur)){
            if(neighbor != parent && !helper(neighbor, cur, graph, visited)){
                return false;
            }
        }
        
        return true;
    }
    
    private Map<Integer, Set<Integer>> initializeGraph(int n, int[][] edges){
        Map<Integer, Set<Integer>> graph = new HashMap<Integer, Set<Integer>>();
        for(int i = 0; i < n; i ++){
            graph.put(i, new HashSet<Integer>());
        }
        for(int i = 0; i < edges.length; i ++){
            int node1 = edges[i][0];
            int node2 = edges[i][1];
            graph.get(node1).add(node2);
            graph.get(node2).add(node1);
        }
        return graph;
    }
}


// Union Find
class UnionFind{
    int[] parent;
    
    // Constructor
    UnionFind(int n){
        parent = new int[n];
        for(int i = 0; i < n; i ++){
            parent[i] = i;
        }
    }
    
    public int find(int x){
        int x_parent = parent[x];
        while(x_parent != parent[x_parent]){
            x_parent = parent[x_parent];
        }
        return x_parent;
    }
    
    public void union(int x, int y){
        int x_parent = find(x);
        int y_parent = find(y);
        if(x_parent != y_parent){
            parent[x_parent] = y_parent;
        }
    }
}

public class Solution {
    public boolean validTree(int n, int[][] edges) {
        if(n <= 0 || edges.length != n - 1){
            return false;
        }
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < edges.length; i ++){
            if(uf.find(edges[i][0]) == uf.find(edges[i][1])){
                return false;
            }
            uf.union(edges[i][0], edges[i][1]);
        }
        return true;
    }
}
