public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        
        for(int i = 0; i < nums1.length; i ++) {
            if(map.containsKey(nums1[i])){
                map.put(nums1[i], map.get(nums1[i]) + 1);
            } else {
                map.put(nums1[i], 1);
            }
        }
        
        for(int i = 0; i < nums2.length; i ++) {
            if(map.containsKey(nums2[i]) && map.get(nums2[i]) > 0) {
                map.put(nums2[i], map.get(nums2[i]) - 1);
                temp.add(nums2[i]);
            }
        }
        
        int[] res = new int[temp.size()];
        for(int i = 0; i < temp.size(); i ++){
            res[i] = temp.get(i);
        }
        return res;
    }
}
//不要忽略line 15的第二个条件！！


//Naive Solution, sort them first
public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        ArrayList<Integer> temp = new ArrayList<Integer>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int p1 = 0, p2 = 0;
        while(p1 < nums1.length && p2 < nums2.length) {
            if(nums1[p1] == nums2[p2]) {
                temp.add(nums1[p1]);
                p1 ++;
                p2 ++;
            } else if(nums1[p1] > nums2[p2]) {
                p2 ++;
            } else {
                p1 ++;
            }
        }
        
        int[] res = new int[temp.size()];
        for(int i = 0; i < temp.size(); i ++){
            res[i] = temp.get(i);
        }
        return res;
    }
}
