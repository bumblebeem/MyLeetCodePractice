// 1. O(n) space HashMap solution, 2 passes
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        HashMap<RandomListNode, RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();
        RandomListNode dummy = new RandomListNode(0);
        RandomListNode curNew = dummy;
        RandomListNode cur = head;
        
        while(cur != null){
            RandomListNode newNode = new RandomListNode(cur.label);
            map.put(cur, newNode);
            curNew.next = newNode;
            cur = cur.next;
            curNew = curNew.next;
        }
        
        curNew = dummy;
        cur = head;
        while(cur != null){
            if(cur.random != null){
                curNew.next.random = map.get(cur.random);
            }
            curNew = curNew.next;
            cur = cur.next;
        }
        
        return dummy.next;
    }
}


// 2. O(n) space HashMap solution, 1 passes
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        // mapping nodes in OLD list to corresponding nodes in NEW list
        HashMap<RandomListNode, RandomListNode> oldNewMap = new HashMap<RandomListNode, RandomListNode>();
        RandomListNode dummy = new RandomListNode(0);
        RandomListNode curNew = dummy;
        RandomListNode cur = head;
        
        while(cur != null){
            RandomListNode newNode = null;
            // deal with "label"
            if(oldNewMap.containsKey(cur)){
                newNode = oldNewMap.get(cur);
            } else {
                newNode = new RandomListNode(cur.label);
                oldNewMap.put(cur, newNode);
            }
            // deal with "random" pointer
            if(cur.random != null){
                if(oldNewMap.containsKey(cur.random)){
                    newNode.random = oldNewMap.get(cur.random);
                } else {
                    newNode.random = new RandomListNode(cur.random.label);
                    oldNewMap.put(cur.random, newNode.random);
                }
            }
            // deal with "next" pointer
            curNew.next = newNode;

            curNew = curNew.next;
            cur = cur.next;
        }
        
        return dummy.next;
    }
}


// 3. O(1) space solution
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null){
            return head;
        }
        
        RandomListNode cur = head;
        while(cur != null){
            RandomListNode copy = new RandomListNode(cur.label);
            copy.next = cur.next;
            cur.next = copy;
            cur = copy.next;
        }
        
        cur = head;
        while(cur != null){
            if(cur.random != null){
                cur.next.random = cur.random.next;
            }
            cur = cur.next.next;
        }
        
        RandomListNode newHead = head.next;
        cur = head;
        while(cur != null){
            RandomListNode newNode = cur.next;
            cur.next = cur.next.next;
            cur = cur.next;
            if(newNode.next != null){
                newNode.next = newNode.next.next;
            }
        }
        
        return newHead;
    }
}


// Great Link with Explanation:
// https://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/73016

// http://www.jiuzhang.com/solutions/copy-list-with-random-pointer/
